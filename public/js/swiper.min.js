"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
/**
 * Swiper 11.0.6
 * Most modern mobile touch slider and framework with hardware accelerated transitions
 * https://swiperjs.com
 *
 * Copyright 2014-2024 Vladimir Kharlampidi
 *
 * Released under the MIT License
 *
 * Released on: February 5, 2024
 */

var Swiper = function () {
  "use strict";

  function e(e) {
    return null !== e && "object" == _typeof(e) && "constructor" in e && e.constructor === Object;
  }
  function t(s, i) {
    void 0 === s && (s = {}), void 0 === i && (i = {}), Object.keys(i).forEach(function (r) {
      void 0 === s[r] ? s[r] = i[r] : e(i[r]) && e(s[r]) && Object.keys(i[r]).length > 0 && t(s[r], i[r]);
    });
  }
  var s = {
    body: {},
    addEventListener: function addEventListener() {},
    removeEventListener: function removeEventListener() {},
    activeElement: {
      blur: function blur() {},
      nodeName: ""
    },
    querySelector: function querySelector() {
      return null;
    },
    querySelectorAll: function querySelectorAll() {
      return [];
    },
    getElementById: function getElementById() {
      return null;
    },
    createEvent: function createEvent() {
      return {
        initEvent: function initEvent() {}
      };
    },
    createElement: function createElement() {
      return {
        children: [],
        childNodes: [],
        style: {},
        setAttribute: function setAttribute() {},
        getElementsByTagName: function getElementsByTagName() {
          return [];
        }
      };
    },
    createElementNS: function createElementNS() {
      return {};
    },
    importNode: function importNode() {
      return null;
    },
    location: {
      hash: "",
      host: "",
      hostname: "",
      href: "",
      origin: "",
      pathname: "",
      protocol: "",
      search: ""
    }
  };
  function i() {
    var e = "undefined" != typeof document ? document : {};
    return t(e, s), e;
  }
  var r = {
    document: s,
    navigator: {
      userAgent: ""
    },
    location: {
      hash: "",
      host: "",
      hostname: "",
      href: "",
      origin: "",
      pathname: "",
      protocol: "",
      search: ""
    },
    history: {
      replaceState: function replaceState() {},
      pushState: function pushState() {},
      go: function go() {},
      back: function back() {}
    },
    CustomEvent: function CustomEvent() {
      return this;
    },
    addEventListener: function addEventListener() {},
    removeEventListener: function removeEventListener() {},
    getComputedStyle: function getComputedStyle() {
      return {
        getPropertyValue: function getPropertyValue() {
          return "";
        }
      };
    },
    Image: function Image() {},
    Date: function Date() {},
    screen: {},
    setTimeout: function setTimeout() {},
    clearTimeout: function clearTimeout() {},
    matchMedia: function matchMedia() {
      return {};
    },
    requestAnimationFrame: function requestAnimationFrame(e) {
      return "undefined" == typeof setTimeout ? (e(), null) : setTimeout(e, 0);
    },
    cancelAnimationFrame: function cancelAnimationFrame(e) {
      "undefined" != typeof setTimeout && clearTimeout(e);
    }
  };
  function n() {
    var e = "undefined" != typeof window ? window : {};
    return t(e, r), e;
  }
  function a(e, t) {
    return void 0 === t && (t = 0), setTimeout(e, t);
  }
  function o() {
    return Date.now();
  }
  function l(e, t) {
    void 0 === t && (t = "x");
    var s = n();
    var i, r, a;
    var o = function (e) {
      var t = n();
      var s;
      return t.getComputedStyle && (s = t.getComputedStyle(e, null)), !s && e.currentStyle && (s = e.currentStyle), s || (s = e.style), s;
    }(e);
    return s.WebKitCSSMatrix ? (r = o.transform || o.webkitTransform, r.split(",").length > 6 && (r = r.split(", ").map(function (e) {
      return e.replace(",", ".");
    }).join(", ")), a = new s.WebKitCSSMatrix("none" === r ? "" : r)) : (a = o.MozTransform || o.OTransform || o.MsTransform || o.msTransform || o.transform || o.getPropertyValue("transform").replace("translate(", "matrix(1, 0, 0, 1,"), i = a.toString().split(",")), "x" === t && (r = s.WebKitCSSMatrix ? a.m41 : 16 === i.length ? parseFloat(i[12]) : parseFloat(i[4])), "y" === t && (r = s.WebKitCSSMatrix ? a.m42 : 16 === i.length ? parseFloat(i[13]) : parseFloat(i[5])), r || 0;
  }
  function d(e) {
    return "object" == _typeof(e) && null !== e && e.constructor && "Object" === Object.prototype.toString.call(e).slice(8, -1);
  }
  function c() {
    var e = Object(arguments.length <= 0 ? void 0 : arguments[0]),
      t = ["__proto__", "constructor", "prototype"];
    for (var _i = 1; _i < arguments.length; _i += 1) {
      var _r = _i < 0 || arguments.length <= _i ? void 0 : arguments[_i];
      if (null != _r && (s = _r, !("undefined" != typeof window && void 0 !== window.HTMLElement ? s instanceof HTMLElement : s && (1 === s.nodeType || 11 === s.nodeType)))) {
        var _s = Object.keys(Object(_r)).filter(function (e) {
          return t.indexOf(e) < 0;
        });
        for (var _t = 0, _i2 = _s.length; _t < _i2; _t += 1) {
          var _i3 = _s[_t],
            _n = Object.getOwnPropertyDescriptor(_r, _i3);
          void 0 !== _n && _n.enumerable && (d(e[_i3]) && d(_r[_i3]) ? _r[_i3].__swiper__ ? e[_i3] = _r[_i3] : c(e[_i3], _r[_i3]) : !d(e[_i3]) && d(_r[_i3]) ? (e[_i3] = {}, _r[_i3].__swiper__ ? e[_i3] = _r[_i3] : c(e[_i3], _r[_i3])) : e[_i3] = _r[_i3]);
        }
      }
    }
    var s;
    return e;
  }
  function p(e, t, s) {
    e.style.setProperty(t, s);
  }
  function u(e) {
    var t = e.swiper,
      s = e.targetPosition,
      i = e.side;
    var r = n(),
      a = -t.translate;
    var o,
      l = null;
    var d = t.params.speed;
    t.wrapperEl.style.scrollSnapType = "none", r.cancelAnimationFrame(t.cssModeFrameID);
    var c = s > a ? "next" : "prev",
      p = function p(e, t) {
        return "next" === c && e >= t || "prev" === c && e <= t;
      },
      u = function u() {
        o = new Date().getTime(), null === l && (l = o);
        var e = Math.max(Math.min((o - l) / d, 1), 0),
          n = .5 - Math.cos(e * Math.PI) / 2;
        var c = a + n * (s - a);
        if (p(c, s) && (c = s), t.wrapperEl.scrollTo(_defineProperty({}, i, c)), p(c, s)) return t.wrapperEl.style.overflow = "hidden", t.wrapperEl.style.scrollSnapType = "", setTimeout(function () {
          t.wrapperEl.style.overflow = "", t.wrapperEl.scrollTo(_defineProperty({}, i, c));
        }), void r.cancelAnimationFrame(t.cssModeFrameID);
        t.cssModeFrameID = r.requestAnimationFrame(u);
      };
    u();
  }
  function h(e, t) {
    return void 0 === t && (t = ""), _toConsumableArray(e.children).filter(function (e) {
      return e.matches(t);
    });
  }
  function f(e) {
    try {
      return void console.warn(e);
    } catch (e) {}
  }
  function m(e, t) {
    var _s$classList;
    void 0 === t && (t = []);
    var s = document.createElement(e);
    return (_s$classList = s.classList).add.apply(_s$classList, _toConsumableArray(Array.isArray(t) ? t : function (e) {
      return void 0 === e && (e = ""), e.trim().split(" ").filter(function (e) {
        return !!e.trim();
      });
    }(t))), s;
  }
  function v(e, t) {
    return n().getComputedStyle(e, null).getPropertyValue(t);
  }
  function g(e) {
    var t,
      s = e;
    if (s) {
      for (t = 0; null !== (s = s.previousSibling);) 1 === s.nodeType && (t += 1);
      return t;
    }
  }
  function w(e, t, s) {
    var i = n();
    return s ? e["width" === t ? "offsetWidth" : "offsetHeight"] + parseFloat(i.getComputedStyle(e, null).getPropertyValue("width" === t ? "margin-right" : "margin-top")) + parseFloat(i.getComputedStyle(e, null).getPropertyValue("width" === t ? "margin-left" : "margin-bottom")) : e.offsetWidth;
  }
  var S, T, b;
  function x() {
    return S || (S = function () {
      var e = n(),
        t = i();
      return {
        smoothScroll: t.documentElement && t.documentElement.style && "scrollBehavior" in t.documentElement.style,
        touch: !!("ontouchstart" in e || e.DocumentTouch && t instanceof e.DocumentTouch)
      };
    }()), S;
  }
  function y(e) {
    return void 0 === e && (e = {}), T || (T = function (e) {
      var _ref = void 0 === e ? {} : e,
        t = _ref.userAgent;
      var s = x(),
        i = n(),
        r = i.navigator.platform,
        a = t || i.navigator.userAgent,
        o = {
          ios: !1,
          android: !1
        },
        l = i.screen.width,
        d = i.screen.height,
        c = a.match(/(Android);?[\s\/]+([\d.]+)?/);
      var p = a.match(/(iPad).*OS\s([\d_]+)/);
      var u = a.match(/(iPod)(.*OS\s([\d_]+))?/),
        h = !p && a.match(/(iPhone\sOS|iOS)\s([\d_]+)/),
        f = "Win32" === r;
      var m = "MacIntel" === r;
      return !p && m && s.touch && ["1024x1366", "1366x1024", "834x1194", "1194x834", "834x1112", "1112x834", "768x1024", "1024x768", "820x1180", "1180x820", "810x1080", "1080x810"].indexOf("".concat(l, "x").concat(d)) >= 0 && (p = a.match(/(Version)\/([\d.]+)/), p || (p = [0, 1, "13_0_0"]), m = !1), c && !f && (o.os = "android", o.android = !0), (p || h || u) && (o.os = "ios", o.ios = !0), o;
    }(e)), T;
  }
  function E() {
    return b || (b = function () {
      var e = n(),
        t = y();
      var s = !1;
      function i() {
        var t = e.navigator.userAgent.toLowerCase();
        return t.indexOf("safari") >= 0 && t.indexOf("chrome") < 0 && t.indexOf("android") < 0;
      }
      if (i()) {
        var _t2 = String(e.navigator.userAgent);
        if (_t2.includes("Version/")) {
          var _t2$split$1$split$0$s = _t2.split("Version/")[1].split(" ")[0].split(".").map(function (e) {
              return Number(e);
            }),
            _t2$split$1$split$0$s2 = _slicedToArray(_t2$split$1$split$0$s, 2),
            _e2 = _t2$split$1$split$0$s2[0],
            _i4 = _t2$split$1$split$0$s2[1];
          s = _e2 < 16 || 16 === _e2 && _i4 < 2;
        }
      }
      var r = /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent),
        a = i();
      return {
        isSafari: s || a,
        needPerspectiveFix: s,
        need3dFix: a || r && t.ios,
        isWebView: r
      };
    }()), b;
  }
  var M = {
    on: function on(e, t, s) {
      var i = this;
      if (!i.eventsListeners || i.destroyed) return i;
      if ("function" != typeof t) return i;
      var r = s ? "unshift" : "push";
      return e.split(" ").forEach(function (e) {
        i.eventsListeners[e] || (i.eventsListeners[e] = []), i.eventsListeners[e][r](t);
      }), i;
    },
    once: function once(e, t, s) {
      var i = this;
      if (!i.eventsListeners || i.destroyed) return i;
      if ("function" != typeof t) return i;
      function r() {
        i.off(e, r), r.__emitterProxy && delete r.__emitterProxy;
        for (var s = arguments.length, n = new Array(s), a = 0; a < s; a++) n[a] = arguments[a];
        t.apply(i, n);
      }
      return r.__emitterProxy = t, i.on(e, r, s);
    },
    onAny: function onAny(e, t) {
      var s = this;
      if (!s.eventsListeners || s.destroyed) return s;
      if ("function" != typeof e) return s;
      var i = t ? "unshift" : "push";
      return s.eventsAnyListeners.indexOf(e) < 0 && s.eventsAnyListeners[i](e), s;
    },
    offAny: function offAny(e) {
      var t = this;
      if (!t.eventsListeners || t.destroyed) return t;
      if (!t.eventsAnyListeners) return t;
      var s = t.eventsAnyListeners.indexOf(e);
      return s >= 0 && t.eventsAnyListeners.splice(s, 1), t;
    },
    off: function off(e, t) {
      var s = this;
      return !s.eventsListeners || s.destroyed ? s : s.eventsListeners ? (e.split(" ").forEach(function (e) {
        void 0 === t ? s.eventsListeners[e] = [] : s.eventsListeners[e] && s.eventsListeners[e].forEach(function (i, r) {
          (i === t || i.__emitterProxy && i.__emitterProxy === t) && s.eventsListeners[e].splice(r, 1);
        });
      }), s) : s;
    },
    emit: function emit() {
      var e = this;
      if (!e.eventsListeners || e.destroyed) return e;
      if (!e.eventsListeners) return e;
      var t, s, i;
      for (var r = arguments.length, n = new Array(r), a = 0; a < r; a++) n[a] = arguments[a];
      "string" == typeof n[0] || Array.isArray(n[0]) ? (t = n[0], s = n.slice(1, n.length), i = e) : (t = n[0].events, s = n[0].data, i = n[0].context || e), s.unshift(i);
      return (Array.isArray(t) ? t : t.split(" ")).forEach(function (t) {
        e.eventsAnyListeners && e.eventsAnyListeners.length && e.eventsAnyListeners.forEach(function (e) {
          e.apply(i, [t].concat(_toConsumableArray(s)));
        }), e.eventsListeners && e.eventsListeners[t] && e.eventsListeners[t].forEach(function (e) {
          e.apply(i, s);
        });
      }), e;
    }
  };
  var C = function C(e, t) {
      if (!e || e.destroyed || !e.params) return;
      var s = t.closest(e.isElement ? "swiper-slide" : ".".concat(e.params.slideClass));
      if (s) {
        var _t3 = s.querySelector(".".concat(e.params.lazyPreloaderClass));
        !_t3 && e.isElement && (s.shadowRoot ? _t3 = s.shadowRoot.querySelector(".".concat(e.params.lazyPreloaderClass)) : requestAnimationFrame(function () {
          s.shadowRoot && (_t3 = s.shadowRoot.querySelector(".".concat(e.params.lazyPreloaderClass)), _t3 && _t3.remove());
        })), _t3 && _t3.remove();
      }
    },
    P = function P(e, t) {
      if (!e.slides[t]) return;
      var s = e.slides[t].querySelector('[loading="lazy"]');
      s && s.removeAttribute("loading");
    },
    I = function I(e) {
      if (!e || e.destroyed || !e.params) return;
      var t = e.params.lazyPreloadPrevNext;
      var s = e.slides.length;
      if (!s || !t || t < 0) return;
      t = Math.min(t, s);
      var i = "auto" === e.params.slidesPerView ? e.slidesPerViewDynamic() : Math.ceil(e.params.slidesPerView),
        r = e.activeIndex;
      if (e.params.grid && e.params.grid.rows > 1) {
        var _s2 = r,
          _n2 = [_s2 - t];
        return _n2.push.apply(_n2, _toConsumableArray(Array.from({
          length: t
        }).map(function (e, t) {
          return _s2 + i + t;
        }))), void e.slides.forEach(function (t, s) {
          _n2.includes(t.column) && P(e, s);
        });
      }
      var n = r + i - 1;
      if (e.params.rewind || e.params.loop) for (var _i5 = r - t; _i5 <= n + t; _i5 += 1) {
        var _t4 = (_i5 % s + s) % s;
        (_t4 < r || _t4 > n) && P(e, _t4);
      } else for (var _i6 = Math.max(r - t, 0); _i6 <= Math.min(n + t, s - 1); _i6 += 1) _i6 !== r && (_i6 > n || _i6 < r) && P(e, _i6);
    };
  var L = {
    updateSize: function updateSize() {
      var e = this;
      var t, s;
      var i = e.el;
      t = void 0 !== e.params.width && null !== e.params.width ? e.params.width : i.clientWidth, s = void 0 !== e.params.height && null !== e.params.height ? e.params.height : i.clientHeight, 0 === t && e.isHorizontal() || 0 === s && e.isVertical() || (t = t - parseInt(v(i, "padding-left") || 0, 10) - parseInt(v(i, "padding-right") || 0, 10), s = s - parseInt(v(i, "padding-top") || 0, 10) - parseInt(v(i, "padding-bottom") || 0, 10), Number.isNaN(t) && (t = 0), Number.isNaN(s) && (s = 0), Object.assign(e, {
        width: t,
        height: s,
        size: e.isHorizontal() ? t : s
      }));
    },
    updateSlides: function updateSlides() {
      var e = this;
      function t(t, s) {
        return parseFloat(t.getPropertyValue(e.getDirectionLabel(s)) || 0);
      }
      var s = e.params,
        i = e.wrapperEl,
        r = e.slidesEl,
        n = e.size,
        a = e.rtlTranslate,
        o = e.wrongRTL,
        l = e.virtual && s.virtual.enabled,
        d = l ? e.virtual.slides.length : e.slides.length,
        c = h(r, ".".concat(e.params.slideClass, ", swiper-slide")),
        u = l ? e.virtual.slides.length : c.length;
      var f = [];
      var m = [],
        g = [];
      var S = s.slidesOffsetBefore;
      "function" == typeof S && (S = s.slidesOffsetBefore.call(e));
      var T = s.slidesOffsetAfter;
      "function" == typeof T && (T = s.slidesOffsetAfter.call(e));
      var b = e.snapGrid.length,
        x = e.slidesGrid.length;
      var y = s.spaceBetween,
        E = -S,
        M = 0,
        C = 0;
      if (void 0 === n) return;
      "string" == typeof y && y.indexOf("%") >= 0 ? y = parseFloat(y.replace("%", "")) / 100 * n : "string" == typeof y && (y = parseFloat(y)), e.virtualSize = -y, c.forEach(function (e) {
        a ? e.style.marginLeft = "" : e.style.marginRight = "", e.style.marginBottom = "", e.style.marginTop = "";
      }), s.centeredSlides && s.cssMode && (p(i, "--swiper-centered-offset-before", ""), p(i, "--swiper-centered-offset-after", ""));
      var P = s.grid && s.grid.rows > 1 && e.grid;
      var I;
      P ? e.grid.initSlides(c) : e.grid && e.grid.unsetSlides();
      var L = "auto" === s.slidesPerView && s.breakpoints && Object.keys(s.breakpoints).filter(function (e) {
        return void 0 !== s.breakpoints[e].slidesPerView;
      }).length > 0;
      for (var _i7 = 0; _i7 < u; _i7 += 1) {
        var _r2 = void 0;
        if (I = 0, c[_i7] && (_r2 = c[_i7]), P && e.grid.updateSlide(_i7, _r2, c), !c[_i7] || "none" !== v(_r2, "display")) {
          if ("auto" === s.slidesPerView) {
            L && (c[_i7].style[e.getDirectionLabel("width")] = "");
            var _n3 = getComputedStyle(_r2),
              _a = _r2.style.transform,
              _o = _r2.style.webkitTransform;
            if (_a && (_r2.style.transform = "none"), _o && (_r2.style.webkitTransform = "none"), s.roundLengths) I = e.isHorizontal() ? w(_r2, "width", !0) : w(_r2, "height", !0);else {
              var _e3 = t(_n3, "width"),
                _s3 = t(_n3, "padding-left"),
                _i8 = t(_n3, "padding-right"),
                _a2 = t(_n3, "margin-left"),
                _o2 = t(_n3, "margin-right"),
                _l = _n3.getPropertyValue("box-sizing");
              if (_l && "border-box" === _l) I = _e3 + _a2 + _o2;else {
                var _r3 = _r2,
                  _t5 = _r3.clientWidth,
                  _n4 = _r3.offsetWidth;
                I = _e3 + _s3 + _i8 + _a2 + _o2 + (_n4 - _t5);
              }
            }
            _a && (_r2.style.transform = _a), _o && (_r2.style.webkitTransform = _o), s.roundLengths && (I = Math.floor(I));
          } else I = (n - (s.slidesPerView - 1) * y) / s.slidesPerView, s.roundLengths && (I = Math.floor(I)), c[_i7] && (c[_i7].style[e.getDirectionLabel("width")] = "".concat(I, "px"));
          c[_i7] && (c[_i7].swiperSlideSize = I), g.push(I), s.centeredSlides ? (E = E + I / 2 + M / 2 + y, 0 === M && 0 !== _i7 && (E = E - n / 2 - y), 0 === _i7 && (E = E - n / 2 - y), Math.abs(E) < .001 && (E = 0), s.roundLengths && (E = Math.floor(E)), C % s.slidesPerGroup == 0 && f.push(E), m.push(E)) : (s.roundLengths && (E = Math.floor(E)), (C - Math.min(e.params.slidesPerGroupSkip, C)) % e.params.slidesPerGroup == 0 && f.push(E), m.push(E), E = E + I + y), e.virtualSize += I + y, M = I, C += 1;
        }
      }
      if (e.virtualSize = Math.max(e.virtualSize, n) + T, a && o && ("slide" === s.effect || "coverflow" === s.effect) && (i.style.width = "".concat(e.virtualSize + y, "px")), s.setWrapperSize && (i.style[e.getDirectionLabel("width")] = "".concat(e.virtualSize + y, "px")), P && e.grid.updateWrapperSize(I, f), !s.centeredSlides) {
        var _t6 = [];
        for (var _i9 = 0; _i9 < f.length; _i9 += 1) {
          var _r4 = f[_i9];
          s.roundLengths && (_r4 = Math.floor(_r4)), f[_i9] <= e.virtualSize - n && _t6.push(_r4);
        }
        f = _t6, Math.floor(e.virtualSize - n) - Math.floor(f[f.length - 1]) > 1 && f.push(e.virtualSize - n);
      }
      if (l && s.loop) {
        var _t7 = g[0] + y;
        if (s.slidesPerGroup > 1) {
          var _i10 = Math.ceil((e.virtual.slidesBefore + e.virtual.slidesAfter) / s.slidesPerGroup),
            _r5 = _t7 * s.slidesPerGroup;
          for (var _e4 = 0; _e4 < _i10; _e4 += 1) f.push(f[f.length - 1] + _r5);
        }
        for (var _i11 = 0; _i11 < e.virtual.slidesBefore + e.virtual.slidesAfter; _i11 += 1) 1 === s.slidesPerGroup && f.push(f[f.length - 1] + _t7), m.push(m[m.length - 1] + _t7), e.virtualSize += _t7;
      }
      if (0 === f.length && (f = [0]), 0 !== y) {
        var _t8 = e.isHorizontal() && a ? "marginLeft" : e.getDirectionLabel("marginRight");
        c.filter(function (e, t) {
          return !(s.cssMode && !s.loop) || t !== c.length - 1;
        }).forEach(function (e) {
          e.style[_t8] = "".concat(y, "px");
        });
      }
      if (s.centeredSlides && s.centeredSlidesBounds) {
        var _e5 = 0;
        g.forEach(function (t) {
          _e5 += t + (y || 0);
        }), _e5 -= y;
        var _t9 = _e5 - n;
        f = f.map(function (e) {
          return e <= 0 ? -S : e > _t9 ? _t9 + T : e;
        });
      }
      if (s.centerInsufficientSlides) {
        var _e6 = 0;
        if (g.forEach(function (t) {
          _e6 += t + (y || 0);
        }), _e6 -= y, _e6 < n) {
          var _t10 = (n - _e6) / 2;
          f.forEach(function (e, s) {
            f[s] = e - _t10;
          }), m.forEach(function (e, s) {
            m[s] = e + _t10;
          });
        }
      }
      if (Object.assign(e, {
        slides: c,
        snapGrid: f,
        slidesGrid: m,
        slidesSizesGrid: g
      }), s.centeredSlides && s.cssMode && !s.centeredSlidesBounds) {
        p(i, "--swiper-centered-offset-before", -f[0] + "px"), p(i, "--swiper-centered-offset-after", e.size / 2 - g[g.length - 1] / 2 + "px");
        var _t11 = -e.snapGrid[0],
          _s4 = -e.slidesGrid[0];
        e.snapGrid = e.snapGrid.map(function (e) {
          return e + _t11;
        }), e.slidesGrid = e.slidesGrid.map(function (e) {
          return e + _s4;
        });
      }
      if (u !== d && e.emit("slidesLengthChange"), f.length !== b && (e.params.watchOverflow && e.checkOverflow(), e.emit("snapGridLengthChange")), m.length !== x && e.emit("slidesGridLengthChange"), s.watchSlidesProgress && e.updateSlidesOffset(), e.emit("slidesUpdated"), !(l || s.cssMode || "slide" !== s.effect && "fade" !== s.effect)) {
        var _t12 = "".concat(s.containerModifierClass, "backface-hidden"),
          _i12 = e.el.classList.contains(_t12);
        u <= s.maxBackfaceHiddenSlides ? _i12 || e.el.classList.add(_t12) : _i12 && e.el.classList.remove(_t12);
      }
    },
    updateAutoHeight: function updateAutoHeight(e) {
      var t = this,
        s = [],
        i = t.virtual && t.params.virtual.enabled;
      var r,
        n = 0;
      "number" == typeof e ? t.setTransition(e) : !0 === e && t.setTransition(t.params.speed);
      var a = function a(e) {
        return i ? t.slides[t.getSlideIndexByData(e)] : t.slides[e];
      };
      if ("auto" !== t.params.slidesPerView && t.params.slidesPerView > 1) {
        if (t.params.centeredSlides) (t.visibleSlides || []).forEach(function (e) {
          s.push(e);
        });else for (r = 0; r < Math.ceil(t.params.slidesPerView); r += 1) {
          var _e7 = t.activeIndex + r;
          if (_e7 > t.slides.length && !i) break;
          s.push(a(_e7));
        }
      } else s.push(a(t.activeIndex));
      for (r = 0; r < s.length; r += 1) if (void 0 !== s[r]) {
        var _e8 = s[r].offsetHeight;
        n = _e8 > n ? _e8 : n;
      }
      (n || 0 === n) && (t.wrapperEl.style.height = "".concat(n, "px"));
    },
    updateSlidesOffset: function updateSlidesOffset() {
      var e = this,
        t = e.slides,
        s = e.isElement ? e.isHorizontal() ? e.wrapperEl.offsetLeft : e.wrapperEl.offsetTop : 0;
      for (var _i13 = 0; _i13 < t.length; _i13 += 1) t[_i13].swiperSlideOffset = (e.isHorizontal() ? t[_i13].offsetLeft : t[_i13].offsetTop) - s - e.cssOverflowAdjustment();
    },
    updateSlidesProgress: function updateSlidesProgress(e) {
      void 0 === e && (e = this && this.translate || 0);
      var t = this,
        s = t.params,
        i = t.slides,
        r = t.rtlTranslate,
        n = t.snapGrid;
      if (0 === i.length) return;
      void 0 === i[0].swiperSlideOffset && t.updateSlidesOffset();
      var a = -e;
      r && (a = e), i.forEach(function (e) {
        e.classList.remove(s.slideVisibleClass, s.slideFullyVisibleClass);
      }), t.visibleSlidesIndexes = [], t.visibleSlides = [];
      var o = s.spaceBetween;
      "string" == typeof o && o.indexOf("%") >= 0 ? o = parseFloat(o.replace("%", "")) / 100 * t.size : "string" == typeof o && (o = parseFloat(o));
      for (var _e9 = 0; _e9 < i.length; _e9 += 1) {
        var _l2 = i[_e9];
        var _d2 = _l2.swiperSlideOffset;
        s.cssMode && s.centeredSlides && (_d2 -= i[0].swiperSlideOffset);
        var _c = (a + (s.centeredSlides ? t.minTranslate() : 0) - _d2) / (_l2.swiperSlideSize + o),
          _p = (a - n[0] + (s.centeredSlides ? t.minTranslate() : 0) - _d2) / (_l2.swiperSlideSize + o),
          _u = -(a - _d2),
          _h = _u + t.slidesSizesGrid[_e9],
          _f = _u >= 0 && _u <= t.size - t.slidesSizesGrid[_e9];
        (_u >= 0 && _u < t.size - 1 || _h > 1 && _h <= t.size || _u <= 0 && _h >= t.size) && (t.visibleSlides.push(_l2), t.visibleSlidesIndexes.push(_e9), i[_e9].classList.add(s.slideVisibleClass)), _f && i[_e9].classList.add(s.slideFullyVisibleClass), _l2.progress = r ? -_c : _c, _l2.originalProgress = r ? -_p : _p;
      }
    },
    updateProgress: function updateProgress(e) {
      var t = this;
      if (void 0 === e) {
        var _s5 = t.rtlTranslate ? -1 : 1;
        e = t && t.translate && t.translate * _s5 || 0;
      }
      var s = t.params,
        i = t.maxTranslate() - t.minTranslate();
      var r = t.progress,
        n = t.isBeginning,
        a = t.isEnd,
        o = t.progressLoop;
      var l = n,
        d = a;
      if (0 === i) r = 0, n = !0, a = !0;else {
        r = (e - t.minTranslate()) / i;
        var _s6 = Math.abs(e - t.minTranslate()) < 1,
          _o3 = Math.abs(e - t.maxTranslate()) < 1;
        n = _s6 || r <= 0, a = _o3 || r >= 1, _s6 && (r = 0), _o3 && (r = 1);
      }
      if (s.loop) {
        var _s7 = t.getSlideIndexByData(0),
          _i14 = t.getSlideIndexByData(t.slides.length - 1),
          _r6 = t.slidesGrid[_s7],
          _n5 = t.slidesGrid[_i14],
          _a3 = t.slidesGrid[t.slidesGrid.length - 1],
          _l3 = Math.abs(e);
        o = _l3 >= _r6 ? (_l3 - _r6) / _a3 : (_l3 + _a3 - _n5) / _a3, o > 1 && (o -= 1);
      }
      Object.assign(t, {
        progress: r,
        progressLoop: o,
        isBeginning: n,
        isEnd: a
      }), (s.watchSlidesProgress || s.centeredSlides && s.autoHeight) && t.updateSlidesProgress(e), n && !l && t.emit("reachBeginning toEdge"), a && !d && t.emit("reachEnd toEdge"), (l && !n || d && !a) && t.emit("fromEdge"), t.emit("progress", r);
    },
    updateSlidesClasses: function updateSlidesClasses() {
      var e = this,
        t = e.slides,
        s = e.params,
        i = e.slidesEl,
        r = e.activeIndex,
        n = e.virtual && s.virtual.enabled,
        a = e.grid && s.grid && s.grid.rows > 1,
        o = function o(e) {
          return h(i, ".".concat(s.slideClass).concat(e, ", swiper-slide").concat(e))[0];
        };
      var l, d, c;
      if (t.forEach(function (e) {
        e.classList.remove(s.slideActiveClass, s.slideNextClass, s.slidePrevClass);
      }), n) {
        if (s.loop) {
          var _t13 = r - e.virtual.slidesBefore;
          _t13 < 0 && (_t13 = e.virtual.slides.length + _t13), _t13 >= e.virtual.slides.length && (_t13 -= e.virtual.slides.length), l = o("[data-swiper-slide-index=\"".concat(_t13, "\"]"));
        } else l = o("[data-swiper-slide-index=\"".concat(r, "\"]"));
      } else a ? (l = t.filter(function (e) {
        return e.column === r;
      })[0], c = t.filter(function (e) {
        return e.column === r + 1;
      })[0], d = t.filter(function (e) {
        return e.column === r - 1;
      })[0]) : l = t[r];
      l && (l.classList.add(s.slideActiveClass), a ? (c && c.classList.add(s.slideNextClass), d && d.classList.add(s.slidePrevClass)) : (c = function (e, t) {
        var s = [];
        for (; e.nextElementSibling;) {
          var _i15 = e.nextElementSibling;
          t ? _i15.matches(t) && s.push(_i15) : s.push(_i15), e = _i15;
        }
        return s;
      }(l, ".".concat(s.slideClass, ", swiper-slide"))[0], s.loop && !c && (c = t[0]), c && c.classList.add(s.slideNextClass), d = function (e, t) {
        var s = [];
        for (; e.previousElementSibling;) {
          var _i16 = e.previousElementSibling;
          t ? _i16.matches(t) && s.push(_i16) : s.push(_i16), e = _i16;
        }
        return s;
      }(l, ".".concat(s.slideClass, ", swiper-slide"))[0], s.loop && 0 === !d && (d = t[t.length - 1]), d && d.classList.add(s.slidePrevClass))), e.emitSlidesClasses();
    },
    updateActiveIndex: function updateActiveIndex(e) {
      var t = this,
        s = t.rtlTranslate ? t.translate : -t.translate,
        i = t.snapGrid,
        r = t.params,
        n = t.activeIndex,
        a = t.realIndex,
        o = t.snapIndex;
      var l,
        d = e;
      var c = function c(e) {
        var s = e - t.virtual.slidesBefore;
        return s < 0 && (s = t.virtual.slides.length + s), s >= t.virtual.slides.length && (s -= t.virtual.slides.length), s;
      };
      if (void 0 === d && (d = function (e) {
        var t = e.slidesGrid,
          s = e.params,
          i = e.rtlTranslate ? e.translate : -e.translate;
        var r;
        for (var _e10 = 0; _e10 < t.length; _e10 += 1) void 0 !== t[_e10 + 1] ? i >= t[_e10] && i < t[_e10 + 1] - (t[_e10 + 1] - t[_e10]) / 2 ? r = _e10 : i >= t[_e10] && i < t[_e10 + 1] && (r = _e10 + 1) : i >= t[_e10] && (r = _e10);
        return s.normalizeSlideIndex && (r < 0 || void 0 === r) && (r = 0), r;
      }(t)), i.indexOf(s) >= 0) l = i.indexOf(s);else {
        var _e11 = Math.min(r.slidesPerGroupSkip, d);
        l = _e11 + Math.floor((d - _e11) / r.slidesPerGroup);
      }
      if (l >= i.length && (l = i.length - 1), d === n && !t.params.loop) return void (l !== o && (t.snapIndex = l, t.emit("snapIndexChange")));
      if (d === n && t.params.loop && t.virtual && t.params.virtual.enabled) return void (t.realIndex = c(d));
      var p = t.grid && r.grid && r.grid.rows > 1;
      var u;
      if (t.virtual && r.virtual.enabled && r.loop) u = c(d);else if (p) {
        var _e12 = t.slides.filter(function (e) {
          return e.column === d;
        })[0];
        var _s8 = parseInt(_e12.getAttribute("data-swiper-slide-index"), 10);
        Number.isNaN(_s8) && (_s8 = Math.max(t.slides.indexOf(_e12), 0)), u = Math.floor(_s8 / r.grid.rows);
      } else if (t.slides[d]) {
        var _e13 = t.slides[d].getAttribute("data-swiper-slide-index");
        u = _e13 ? parseInt(_e13, 10) : d;
      } else u = d;
      Object.assign(t, {
        previousSnapIndex: o,
        snapIndex: l,
        previousRealIndex: a,
        realIndex: u,
        previousIndex: n,
        activeIndex: d
      }), t.initialized && I(t), t.emit("activeIndexChange"), t.emit("snapIndexChange"), (t.initialized || t.params.runCallbacksOnInit) && (a !== u && t.emit("realIndexChange"), t.emit("slideChange"));
    },
    updateClickedSlide: function updateClickedSlide(e, t) {
      var s = this,
        i = s.params;
      var r = e.closest(".".concat(i.slideClass, ", swiper-slide"));
      !r && s.isElement && t && t.length > 1 && t.includes(e) && _toConsumableArray(t.slice(t.indexOf(e) + 1, t.length)).forEach(function (e) {
        !r && e.matches && e.matches(".".concat(i.slideClass, ", swiper-slide")) && (r = e);
      });
      var n,
        a = !1;
      if (r) for (var _e14 = 0; _e14 < s.slides.length; _e14 += 1) if (s.slides[_e14] === r) {
        a = !0, n = _e14;
        break;
      }
      if (!r || !a) return s.clickedSlide = void 0, void (s.clickedIndex = void 0);
      s.clickedSlide = r, s.virtual && s.params.virtual.enabled ? s.clickedIndex = parseInt(r.getAttribute("data-swiper-slide-index"), 10) : s.clickedIndex = n, i.slideToClickedSlide && void 0 !== s.clickedIndex && s.clickedIndex !== s.activeIndex && s.slideToClickedSlide();
    }
  };
  var k = {
    getTranslate: function getTranslate(e) {
      void 0 === e && (e = this.isHorizontal() ? "x" : "y");
      var t = this.params,
        s = this.rtlTranslate,
        i = this.translate,
        r = this.wrapperEl;
      if (t.virtualTranslate) return s ? -i : i;
      if (t.cssMode) return i;
      var n = l(r, e);
      return n += this.cssOverflowAdjustment(), s && (n = -n), n || 0;
    },
    setTranslate: function setTranslate(e, t) {
      var s = this,
        i = s.rtlTranslate,
        r = s.params,
        n = s.wrapperEl,
        a = s.progress;
      var o,
        l = 0,
        d = 0;
      s.isHorizontal() ? l = i ? -e : e : d = e, r.roundLengths && (l = Math.floor(l), d = Math.floor(d)), s.previousTranslate = s.translate, s.translate = s.isHorizontal() ? l : d, r.cssMode ? n[s.isHorizontal() ? "scrollLeft" : "scrollTop"] = s.isHorizontal() ? -l : -d : r.virtualTranslate || (s.isHorizontal() ? l -= s.cssOverflowAdjustment() : d -= s.cssOverflowAdjustment(), n.style.transform = "translate3d(".concat(l, "px, ").concat(d, "px, 0px)"));
      var c = s.maxTranslate() - s.minTranslate();
      o = 0 === c ? 0 : (e - s.minTranslate()) / c, o !== a && s.updateProgress(e), s.emit("setTranslate", s.translate, t);
    },
    minTranslate: function minTranslate() {
      return -this.snapGrid[0];
    },
    maxTranslate: function maxTranslate() {
      return -this.snapGrid[this.snapGrid.length - 1];
    },
    translateTo: function translateTo(e, t, s, i, r) {
      void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === s && (s = !0), void 0 === i && (i = !0);
      var n = this,
        a = n.params,
        o = n.wrapperEl;
      if (n.animating && a.preventInteractionOnTransition) return !1;
      var l = n.minTranslate(),
        d = n.maxTranslate();
      var c;
      if (c = i && e > l ? l : i && e < d ? d : e, n.updateProgress(c), a.cssMode) {
        var _e15 = n.isHorizontal();
        if (0 === t) o[_e15 ? "scrollLeft" : "scrollTop"] = -c;else {
          var _o$scrollTo;
          if (!n.support.smoothScroll) return u({
            swiper: n,
            targetPosition: -c,
            side: _e15 ? "left" : "top"
          }), !0;
          o.scrollTo((_o$scrollTo = {}, _defineProperty(_o$scrollTo, _e15 ? "left" : "top", -c), _defineProperty(_o$scrollTo, "behavior", "smooth"), _o$scrollTo));
        }
        return !0;
      }
      return 0 === t ? (n.setTransition(0), n.setTranslate(c), s && (n.emit("beforeTransitionStart", t, r), n.emit("transitionEnd"))) : (n.setTransition(t), n.setTranslate(c), s && (n.emit("beforeTransitionStart", t, r), n.emit("transitionStart")), n.animating || (n.animating = !0, n.onTranslateToWrapperTransitionEnd || (n.onTranslateToWrapperTransitionEnd = function (e) {
        n && !n.destroyed && e.target === this && (n.wrapperEl.removeEventListener("transitionend", n.onTranslateToWrapperTransitionEnd), n.onTranslateToWrapperTransitionEnd = null, delete n.onTranslateToWrapperTransitionEnd, s && n.emit("transitionEnd"));
      }), n.wrapperEl.addEventListener("transitionend", n.onTranslateToWrapperTransitionEnd))), !0;
    }
  };
  function O(e) {
    var t = e.swiper,
      s = e.runCallbacks,
      i = e.direction,
      r = e.step;
    var n = t.activeIndex,
      a = t.previousIndex;
    var o = i;
    if (o || (o = n > a ? "next" : n < a ? "prev" : "reset"), t.emit("transition".concat(r)), s && n !== a) {
      if ("reset" === o) return void t.emit("slideResetTransition".concat(r));
      t.emit("slideChangeTransition".concat(r)), "next" === o ? t.emit("slideNextTransition".concat(r)) : t.emit("slidePrevTransition".concat(r));
    }
  }
  var A = {
    slideTo: function slideTo(e, t, s, i, r) {
      void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === s && (s = !0), "string" == typeof e && (e = parseInt(e, 10));
      var n = this;
      var a = e;
      a < 0 && (a = 0);
      var o = n.params,
        l = n.snapGrid,
        d = n.slidesGrid,
        c = n.previousIndex,
        p = n.activeIndex,
        h = n.rtlTranslate,
        f = n.wrapperEl,
        m = n.enabled;
      if (n.animating && o.preventInteractionOnTransition || !m && !i && !r || n.destroyed) return !1;
      var v = Math.min(n.params.slidesPerGroupSkip, a);
      var g = v + Math.floor((a - v) / n.params.slidesPerGroup);
      g >= l.length && (g = l.length - 1);
      var w = -l[g];
      if (o.normalizeSlideIndex) for (var _e16 = 0; _e16 < d.length; _e16 += 1) {
        var _t14 = -Math.floor(100 * w),
          _s9 = Math.floor(100 * d[_e16]),
          _i17 = Math.floor(100 * d[_e16 + 1]);
        void 0 !== d[_e16 + 1] ? _t14 >= _s9 && _t14 < _i17 - (_i17 - _s9) / 2 ? a = _e16 : _t14 >= _s9 && _t14 < _i17 && (a = _e16 + 1) : _t14 >= _s9 && (a = _e16);
      }
      if (n.initialized && a !== p) {
        if (!n.allowSlideNext && (h ? w > n.translate && w > n.minTranslate() : w < n.translate && w < n.minTranslate())) return !1;
        if (!n.allowSlidePrev && w > n.translate && w > n.maxTranslate() && (p || 0) !== a) return !1;
      }
      var S;
      if (a !== (c || 0) && s && n.emit("beforeSlideChangeStart"), n.updateProgress(w), S = a > p ? "next" : a < p ? "prev" : "reset", h && -w === n.translate || !h && w === n.translate) return n.updateActiveIndex(a), o.autoHeight && n.updateAutoHeight(), n.updateSlidesClasses(), "slide" !== o.effect && n.setTranslate(w), "reset" !== S && (n.transitionStart(s, S), n.transitionEnd(s, S)), !1;
      if (o.cssMode) {
        var _e17 = n.isHorizontal(),
          _s10 = h ? w : -w;
        if (0 === t) {
          var _t15 = n.virtual && n.params.virtual.enabled;
          _t15 && (n.wrapperEl.style.scrollSnapType = "none", n._immediateVirtual = !0), _t15 && !n._cssModeVirtualInitialSet && n.params.initialSlide > 0 ? (n._cssModeVirtualInitialSet = !0, requestAnimationFrame(function () {
            f[_e17 ? "scrollLeft" : "scrollTop"] = _s10;
          })) : f[_e17 ? "scrollLeft" : "scrollTop"] = _s10, _t15 && requestAnimationFrame(function () {
            n.wrapperEl.style.scrollSnapType = "", n._immediateVirtual = !1;
          });
        } else {
          var _f$scrollTo;
          if (!n.support.smoothScroll) return u({
            swiper: n,
            targetPosition: _s10,
            side: _e17 ? "left" : "top"
          }), !0;
          f.scrollTo((_f$scrollTo = {}, _defineProperty(_f$scrollTo, _e17 ? "left" : "top", _s10), _defineProperty(_f$scrollTo, "behavior", "smooth"), _f$scrollTo));
        }
        return !0;
      }
      return n.setTransition(t), n.setTranslate(w), n.updateActiveIndex(a), n.updateSlidesClasses(), n.emit("beforeTransitionStart", t, i), n.transitionStart(s, S), 0 === t ? n.transitionEnd(s, S) : n.animating || (n.animating = !0, n.onSlideToWrapperTransitionEnd || (n.onSlideToWrapperTransitionEnd = function (e) {
        n && !n.destroyed && e.target === this && (n.wrapperEl.removeEventListener("transitionend", n.onSlideToWrapperTransitionEnd), n.onSlideToWrapperTransitionEnd = null, delete n.onSlideToWrapperTransitionEnd, n.transitionEnd(s, S));
      }), n.wrapperEl.addEventListener("transitionend", n.onSlideToWrapperTransitionEnd)), !0;
    },
    slideToLoop: function slideToLoop(e, t, s, i) {
      if (void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === s && (s = !0), "string" == typeof e) {
        e = parseInt(e, 10);
      }
      var r = this;
      if (r.destroyed) return;
      var n = r.grid && r.params.grid && r.params.grid.rows > 1;
      var a = e;
      if (r.params.loop) if (r.virtual && r.params.virtual.enabled) a += r.virtual.slidesBefore;else {
        var _e18;
        if (n) {
          var _t16 = a * r.params.grid.rows;
          _e18 = r.slides.filter(function (e) {
            return 1 * e.getAttribute("data-swiper-slide-index") === _t16;
          })[0].column;
        } else _e18 = r.getSlideIndexByData(a);
        var _t17 = n ? Math.ceil(r.slides.length / r.params.grid.rows) : r.slides.length,
          _s11 = r.params.centeredSlides;
        var _i18 = r.params.slidesPerView;
        "auto" === _i18 ? _i18 = r.slidesPerViewDynamic() : (_i18 = Math.ceil(parseFloat(r.params.slidesPerView, 10)), _s11 && _i18 % 2 == 0 && (_i18 += 1));
        var _o4 = _t17 - _e18 < _i18;
        if (_s11 && (_o4 = _o4 || _e18 < Math.ceil(_i18 / 2)), _o4) {
          var _i19 = _s11 ? _e18 < r.activeIndex ? "prev" : "next" : _e18 - r.activeIndex - 1 < r.params.slidesPerView ? "next" : "prev";
          r.loopFix({
            direction: _i19,
            slideTo: !0,
            activeSlideIndex: "next" === _i19 ? _e18 + 1 : _e18 - _t17 + 1,
            slideRealIndex: "next" === _i19 ? r.realIndex : void 0
          });
        }
        if (n) {
          var _e19 = a * r.params.grid.rows;
          a = r.slides.filter(function (t) {
            return 1 * t.getAttribute("data-swiper-slide-index") === _e19;
          })[0].column;
        } else a = r.getSlideIndexByData(a);
      }
      return requestAnimationFrame(function () {
        r.slideTo(a, t, s, i);
      }), r;
    },
    slideNext: function slideNext(e, t, s) {
      void 0 === e && (e = this.params.speed), void 0 === t && (t = !0);
      var i = this,
        r = i.enabled,
        n = i.params,
        a = i.animating;
      if (!r || i.destroyed) return i;
      var o = n.slidesPerGroup;
      "auto" === n.slidesPerView && 1 === n.slidesPerGroup && n.slidesPerGroupAuto && (o = Math.max(i.slidesPerViewDynamic("current", !0), 1));
      var l = i.activeIndex < n.slidesPerGroupSkip ? 1 : o,
        d = i.virtual && n.virtual.enabled;
      if (n.loop) {
        if (a && !d && n.loopPreventsSliding) return !1;
        if (i.loopFix({
          direction: "next"
        }), i._clientLeft = i.wrapperEl.clientLeft, i.activeIndex === i.slides.length - 1 && n.cssMode) return requestAnimationFrame(function () {
          i.slideTo(i.activeIndex + l, e, t, s);
        }), !0;
      }
      return n.rewind && i.isEnd ? i.slideTo(0, e, t, s) : i.slideTo(i.activeIndex + l, e, t, s);
    },
    slidePrev: function slidePrev(e, t, s) {
      void 0 === e && (e = this.params.speed), void 0 === t && (t = !0);
      var i = this,
        r = i.params,
        n = i.snapGrid,
        a = i.slidesGrid,
        o = i.rtlTranslate,
        l = i.enabled,
        d = i.animating;
      if (!l || i.destroyed) return i;
      var c = i.virtual && r.virtual.enabled;
      if (r.loop) {
        if (d && !c && r.loopPreventsSliding) return !1;
        i.loopFix({
          direction: "prev"
        }), i._clientLeft = i.wrapperEl.clientLeft;
      }
      function p(e) {
        return e < 0 ? -Math.floor(Math.abs(e)) : Math.floor(e);
      }
      var u = p(o ? i.translate : -i.translate),
        h = n.map(function (e) {
          return p(e);
        });
      var f = n[h.indexOf(u) - 1];
      if (void 0 === f && r.cssMode) {
        var _e20;
        n.forEach(function (t, s) {
          u >= t && (_e20 = s);
        }), void 0 !== _e20 && (f = n[_e20 > 0 ? _e20 - 1 : _e20]);
      }
      var m = 0;
      if (void 0 !== f && (m = a.indexOf(f), m < 0 && (m = i.activeIndex - 1), "auto" === r.slidesPerView && 1 === r.slidesPerGroup && r.slidesPerGroupAuto && (m = m - i.slidesPerViewDynamic("previous", !0) + 1, m = Math.max(m, 0))), r.rewind && i.isBeginning) {
        var _r7 = i.params.virtual && i.params.virtual.enabled && i.virtual ? i.virtual.slides.length - 1 : i.slides.length - 1;
        return i.slideTo(_r7, e, t, s);
      }
      return r.loop && 0 === i.activeIndex && r.cssMode ? (requestAnimationFrame(function () {
        i.slideTo(m, e, t, s);
      }), !0) : i.slideTo(m, e, t, s);
    },
    slideReset: function slideReset(e, t, s) {
      void 0 === e && (e = this.params.speed), void 0 === t && (t = !0);
      var i = this;
      if (!i.destroyed) return i.slideTo(i.activeIndex, e, t, s);
    },
    slideToClosest: function slideToClosest(e, t, s, i) {
      void 0 === e && (e = this.params.speed), void 0 === t && (t = !0), void 0 === i && (i = .5);
      var r = this;
      if (r.destroyed) return;
      var n = r.activeIndex;
      var a = Math.min(r.params.slidesPerGroupSkip, n),
        o = a + Math.floor((n - a) / r.params.slidesPerGroup),
        l = r.rtlTranslate ? r.translate : -r.translate;
      if (l >= r.snapGrid[o]) {
        var _e21 = r.snapGrid[o];
        l - _e21 > (r.snapGrid[o + 1] - _e21) * i && (n += r.params.slidesPerGroup);
      } else {
        var _e22 = r.snapGrid[o - 1];
        l - _e22 <= (r.snapGrid[o] - _e22) * i && (n -= r.params.slidesPerGroup);
      }
      return n = Math.max(n, 0), n = Math.min(n, r.slidesGrid.length - 1), r.slideTo(n, e, t, s);
    },
    slideToClickedSlide: function slideToClickedSlide() {
      var e = this;
      if (e.destroyed) return;
      var t = e.params,
        s = e.slidesEl,
        i = "auto" === t.slidesPerView ? e.slidesPerViewDynamic() : t.slidesPerView;
      var r,
        n = e.clickedIndex;
      var o = e.isElement ? "swiper-slide" : ".".concat(t.slideClass);
      if (t.loop) {
        if (e.animating) return;
        r = parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"), 10), t.centeredSlides ? n < e.loopedSlides - i / 2 || n > e.slides.length - e.loopedSlides + i / 2 ? (e.loopFix(), n = e.getSlideIndex(h(s, "".concat(o, "[data-swiper-slide-index=\"").concat(r, "\"]"))[0]), a(function () {
          e.slideTo(n);
        })) : e.slideTo(n) : n > e.slides.length - i ? (e.loopFix(), n = e.getSlideIndex(h(s, "".concat(o, "[data-swiper-slide-index=\"").concat(r, "\"]"))[0]), a(function () {
          e.slideTo(n);
        })) : e.slideTo(n);
      } else e.slideTo(n);
    }
  };
  var z = {
    loopCreate: function loopCreate(e) {
      var t = this,
        s = t.params,
        i = t.slidesEl;
      if (!s.loop || t.virtual && t.params.virtual.enabled) return;
      var r = function r() {
          h(i, ".".concat(s.slideClass, ", swiper-slide")).forEach(function (e, t) {
            e.setAttribute("data-swiper-slide-index", t);
          });
        },
        n = t.grid && s.grid && s.grid.rows > 1,
        a = s.slidesPerGroup * (n ? s.grid.rows : 1),
        o = t.slides.length % a != 0,
        l = n && t.slides.length % s.grid.rows != 0,
        d = function d(e) {
          for (var _i20 = 0; _i20 < e; _i20 += 1) {
            var _e23 = t.isElement ? m("swiper-slide", [s.slideBlankClass]) : m("div", [s.slideClass, s.slideBlankClass]);
            t.slidesEl.append(_e23);
          }
        };
      if (o) {
        if (s.loopAddBlankSlides) {
          d(a - t.slides.length % a), t.recalcSlides(), t.updateSlides();
        } else f("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");
        r();
      } else if (l) {
        if (s.loopAddBlankSlides) {
          d(s.grid.rows - t.slides.length % s.grid.rows), t.recalcSlides(), t.updateSlides();
        } else f("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");
        r();
      } else r();
      t.loopFix({
        slideRealIndex: e,
        direction: s.centeredSlides ? void 0 : "next"
      });
    },
    loopFix: function loopFix(e) {
      var _ref2 = void 0 === e ? {} : e,
        t = _ref2.slideRealIndex,
        _ref2$slideTo = _ref2.slideTo,
        s = _ref2$slideTo === void 0 ? !0 : _ref2$slideTo,
        i = _ref2.direction,
        r = _ref2.setTranslate,
        n = _ref2.activeSlideIndex,
        a = _ref2.byController,
        o = _ref2.byMousewheel;
      var l = this;
      if (!l.params.loop) return;
      l.emit("beforeLoopFix");
      var d = l.slides,
        c = l.allowSlidePrev,
        p = l.allowSlideNext,
        u = l.slidesEl,
        h = l.params,
        m = h.centeredSlides;
      if (l.allowSlidePrev = !0, l.allowSlideNext = !0, l.virtual && h.virtual.enabled) return s && (h.centeredSlides || 0 !== l.snapIndex ? h.centeredSlides && l.snapIndex < h.slidesPerView ? l.slideTo(l.virtual.slides.length + l.snapIndex, 0, !1, !0) : l.snapIndex === l.snapGrid.length - 1 && l.slideTo(l.virtual.slidesBefore, 0, !1, !0) : l.slideTo(l.virtual.slides.length, 0, !1, !0)), l.allowSlidePrev = c, l.allowSlideNext = p, void l.emit("loopFix");
      var v = h.slidesPerView;
      "auto" === v ? v = l.slidesPerViewDynamic() : (v = Math.ceil(parseFloat(h.slidesPerView, 10)), m && v % 2 == 0 && (v += 1));
      var g = h.slidesPerGroupAuto ? v : h.slidesPerGroup;
      var w = g;
      w % g != 0 && (w += g - w % g), w += h.loopAdditionalSlides, l.loopedSlides = w;
      var S = l.grid && h.grid && h.grid.rows > 1;
      d.length < v + w ? f("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters") : S && "row" === h.grid.fill && f("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");
      var T = [],
        b = [];
      var x = l.activeIndex;
      void 0 === n ? n = l.getSlideIndex(d.filter(function (e) {
        return e.classList.contains(h.slideActiveClass);
      })[0]) : x = n;
      var y = "next" === i || !i,
        E = "prev" === i || !i;
      var M = 0,
        C = 0;
      var P = S ? Math.ceil(d.length / h.grid.rows) : d.length,
        I = (S ? d[n].column : n) + (m && void 0 === r ? -v / 2 + .5 : 0);
      if (I < w) {
        M = Math.max(w - I, g);
        for (var _e24 = 0; _e24 < w - I; _e24 += 1) {
          var _t18 = _e24 - Math.floor(_e24 / P) * P;
          if (S) {
            var _e25 = P - _t18 - 1;
            for (var _t19 = d.length - 1; _t19 >= 0; _t19 -= 1) d[_t19].column === _e25 && T.push(_t19);
          } else T.push(P - _t18 - 1);
        }
      } else if (I + v > P - w) {
        C = Math.max(I - (P - 2 * w), g);
        var _loop = function _loop() {
          var t = _e26 - Math.floor(_e26 / P) * P;
          S ? d.forEach(function (e, s) {
            e.column === t && b.push(s);
          }) : b.push(t);
        };
        for (var _e26 = 0; _e26 < C; _e26 += 1) {
          _loop();
        }
      }
      if (l.__preventObserver__ = !0, requestAnimationFrame(function () {
        l.__preventObserver__ = !1;
      }), E && T.forEach(function (e) {
        d[e].swiperLoopMoveDOM = !0, u.prepend(d[e]), d[e].swiperLoopMoveDOM = !1;
      }), y && b.forEach(function (e) {
        d[e].swiperLoopMoveDOM = !0, u.append(d[e]), d[e].swiperLoopMoveDOM = !1;
      }), l.recalcSlides(), "auto" === h.slidesPerView ? l.updateSlides() : S && (T.length > 0 && E || b.length > 0 && y) && l.slides.forEach(function (e, t) {
        l.grid.updateSlide(t, e, l.slides);
      }), h.watchSlidesProgress && l.updateSlidesOffset(), s) if (T.length > 0 && E) {
        if (void 0 === t) {
          var _e27 = l.slidesGrid[x],
            _t20 = l.slidesGrid[x + M] - _e27;
          o ? l.setTranslate(l.translate - _t20) : (l.slideTo(x + M, 0, !1, !0), r && (l.touchEventsData.startTranslate = l.touchEventsData.startTranslate - _t20, l.touchEventsData.currentTranslate = l.touchEventsData.currentTranslate - _t20));
        } else if (r) {
          var _e28 = S ? T.length / h.grid.rows : T.length;
          l.slideTo(l.activeIndex + _e28, 0, !1, !0), l.touchEventsData.currentTranslate = l.translate;
        }
      } else if (b.length > 0 && y) if (void 0 === t) {
        var _e29 = l.slidesGrid[x],
          _t21 = l.slidesGrid[x - C] - _e29;
        o ? l.setTranslate(l.translate - _t21) : (l.slideTo(x - C, 0, !1, !0), r && (l.touchEventsData.startTranslate = l.touchEventsData.startTranslate - _t21, l.touchEventsData.currentTranslate = l.touchEventsData.currentTranslate - _t21));
      } else {
        var _e30 = S ? b.length / h.grid.rows : b.length;
        l.slideTo(l.activeIndex - _e30, 0, !1, !0);
      }
      if (l.allowSlidePrev = c, l.allowSlideNext = p, l.controller && l.controller.control && !a) {
        var _e31 = {
          slideRealIndex: t,
          direction: i,
          setTranslate: r,
          activeSlideIndex: n,
          byController: !0
        };
        Array.isArray(l.controller.control) ? l.controller.control.forEach(function (t) {
          !t.destroyed && t.params.loop && t.loopFix(_objectSpread(_objectSpread({}, _e31), {}, {
            slideTo: t.params.slidesPerView === h.slidesPerView && s
          }));
        }) : l.controller.control instanceof l.constructor && l.controller.control.params.loop && l.controller.control.loopFix(_objectSpread(_objectSpread({}, _e31), {}, {
          slideTo: l.controller.control.params.slidesPerView === h.slidesPerView && s
        }));
      }
      l.emit("loopFix");
    },
    loopDestroy: function loopDestroy() {
      var e = this,
        t = e.params,
        s = e.slidesEl;
      if (!t.loop || e.virtual && e.params.virtual.enabled) return;
      e.recalcSlides();
      var i = [];
      e.slides.forEach(function (e) {
        var t = void 0 === e.swiperSlideIndex ? 1 * e.getAttribute("data-swiper-slide-index") : e.swiperSlideIndex;
        i[t] = e;
      }), e.slides.forEach(function (e) {
        e.removeAttribute("data-swiper-slide-index");
      }), i.forEach(function (e) {
        s.append(e);
      }), e.recalcSlides(), e.slideTo(e.realIndex, 0);
    }
  };
  function G(e, t, s) {
    var i = n(),
      r = e.params,
      a = r.edgeSwipeDetection,
      o = r.edgeSwipeThreshold;
    return !a || !(s <= o || s >= i.innerWidth - o) || "prevent" === a && (t.preventDefault(), !0);
  }
  function D(e) {
    var t = this,
      s = i();
    var r = e;
    r.originalEvent && (r = r.originalEvent);
    var a = t.touchEventsData;
    if ("pointerdown" === r.type) {
      if (null !== a.pointerId && a.pointerId !== r.pointerId) return;
      a.pointerId = r.pointerId;
    } else "touchstart" === r.type && 1 === r.targetTouches.length && (a.touchId = r.targetTouches[0].identifier);
    if ("touchstart" === r.type) return void G(t, r, r.targetTouches[0].pageX);
    var l = t.params,
      d = t.touches,
      c = t.enabled;
    if (!c) return;
    if (!l.simulateTouch && "mouse" === r.pointerType) return;
    if (t.animating && l.preventInteractionOnTransition) return;
    !t.animating && l.cssMode && l.loop && t.loopFix();
    var p = r.target;
    if ("wrapper" === l.touchEventsTarget && !t.wrapperEl.contains(p)) return;
    if ("which" in r && 3 === r.which) return;
    if ("button" in r && r.button > 0) return;
    if (a.isTouched && a.isMoved) return;
    var u = !!l.noSwipingClass && "" !== l.noSwipingClass,
      h = r.composedPath ? r.composedPath() : r.path;
    u && r.target && r.target.shadowRoot && h && (p = h[0]);
    var f = l.noSwipingSelector ? l.noSwipingSelector : ".".concat(l.noSwipingClass),
      m = !(!r.target || !r.target.shadowRoot);
    if (l.noSwiping && (m ? function (e, t) {
      return void 0 === t && (t = this), function t(s) {
        if (!s || s === i() || s === n()) return null;
        s.assignedSlot && (s = s.assignedSlot);
        var r = s.closest(e);
        return r || s.getRootNode ? r || t(s.getRootNode().host) : null;
      }(t);
    }(f, p) : p.closest(f))) return void (t.allowClick = !0);
    if (l.swipeHandler && !p.closest(l.swipeHandler)) return;
    d.currentX = r.pageX, d.currentY = r.pageY;
    var v = d.currentX,
      g = d.currentY;
    if (!G(t, r, v)) return;
    Object.assign(a, {
      isTouched: !0,
      isMoved: !1,
      allowTouchCallbacks: !0,
      isScrolling: void 0,
      startMoving: void 0
    }), d.startX = v, d.startY = g, a.touchStartTime = o(), t.allowClick = !0, t.updateSize(), t.swipeDirection = void 0, l.threshold > 0 && (a.allowThresholdMove = !1);
    var w = !0;
    p.matches(a.focusableElements) && (w = !1, "SELECT" === p.nodeName && (a.isTouched = !1)), s.activeElement && s.activeElement.matches(a.focusableElements) && s.activeElement !== p && s.activeElement.blur();
    var S = w && t.allowTouchMove && l.touchStartPreventDefault;
    !l.touchStartForcePreventDefault && !S || p.isContentEditable || r.preventDefault(), l.freeMode && l.freeMode.enabled && t.freeMode && t.animating && !l.cssMode && t.freeMode.onTouchStart(), t.emit("touchStart", r);
  }
  function _(e) {
    var t = i(),
      s = this,
      r = s.touchEventsData,
      n = s.params,
      a = s.touches,
      l = s.rtlTranslate,
      d = s.enabled;
    if (!d) return;
    if (!n.simulateTouch && "mouse" === e.pointerType) return;
    var c,
      p = e;
    if (p.originalEvent && (p = p.originalEvent), "pointermove" === p.type) {
      if (null !== r.touchId) return;
      if (p.pointerId !== r.pointerId) return;
    }
    if ("touchmove" === p.type) {
      if (c = _toConsumableArray(p.changedTouches).filter(function (e) {
        return e.identifier === r.touchId;
      })[0], !c || c.identifier !== r.touchId) return;
    } else c = p;
    if (!r.isTouched) return void (r.startMoving && r.isScrolling && s.emit("touchMoveOpposite", p));
    var u = c.pageX,
      h = c.pageY;
    if (p.preventedByNestedSwiper) return a.startX = u, void (a.startY = h);
    if (!s.allowTouchMove) return p.target.matches(r.focusableElements) || (s.allowClick = !1), void (r.isTouched && (Object.assign(a, {
      startX: u,
      startY: h,
      currentX: u,
      currentY: h
    }), r.touchStartTime = o()));
    if (n.touchReleaseOnEdges && !n.loop) if (s.isVertical()) {
      if (h < a.startY && s.translate <= s.maxTranslate() || h > a.startY && s.translate >= s.minTranslate()) return r.isTouched = !1, void (r.isMoved = !1);
    } else if (u < a.startX && s.translate <= s.maxTranslate() || u > a.startX && s.translate >= s.minTranslate()) return;
    if (t.activeElement && p.target === t.activeElement && p.target.matches(r.focusableElements)) return r.isMoved = !0, void (s.allowClick = !1);
    r.allowTouchCallbacks && s.emit("touchMove", p), a.previousX = a.currentX, a.previousY = a.currentY, a.currentX = u, a.currentY = h;
    var f = a.currentX - a.startX,
      m = a.currentY - a.startY;
    if (s.params.threshold && Math.sqrt(Math.pow(f, 2) + Math.pow(m, 2)) < s.params.threshold) return;
    if (void 0 === r.isScrolling) {
      var _e32;
      s.isHorizontal() && a.currentY === a.startY || s.isVertical() && a.currentX === a.startX ? r.isScrolling = !1 : f * f + m * m >= 25 && (_e32 = 180 * Math.atan2(Math.abs(m), Math.abs(f)) / Math.PI, r.isScrolling = s.isHorizontal() ? _e32 > n.touchAngle : 90 - _e32 > n.touchAngle);
    }
    if (r.isScrolling && s.emit("touchMoveOpposite", p), void 0 === r.startMoving && (a.currentX === a.startX && a.currentY === a.startY || (r.startMoving = !0)), r.isScrolling) return void (r.isTouched = !1);
    if (!r.startMoving) return;
    s.allowClick = !1, !n.cssMode && p.cancelable && p.preventDefault(), n.touchMoveStopPropagation && !n.nested && p.stopPropagation();
    var v = s.isHorizontal() ? f : m,
      g = s.isHorizontal() ? a.currentX - a.previousX : a.currentY - a.previousY;
    n.oneWayMovement && (v = Math.abs(v) * (l ? 1 : -1), g = Math.abs(g) * (l ? 1 : -1)), a.diff = v, v *= n.touchRatio, l && (v = -v, g = -g);
    var w = s.touchesDirection;
    s.swipeDirection = v > 0 ? "prev" : "next", s.touchesDirection = g > 0 ? "prev" : "next";
    var S = s.params.loop && !n.cssMode,
      T = "next" === s.touchesDirection && s.allowSlideNext || "prev" === s.touchesDirection && s.allowSlidePrev;
    if (!r.isMoved) {
      if (S && T && s.loopFix({
        direction: s.swipeDirection
      }), r.startTranslate = s.getTranslate(), s.setTransition(0), s.animating) {
        var _e33 = new window.CustomEvent("transitionend", {
          bubbles: !0,
          cancelable: !0
        });
        s.wrapperEl.dispatchEvent(_e33);
      }
      r.allowMomentumBounce = !1, !n.grabCursor || !0 !== s.allowSlideNext && !0 !== s.allowSlidePrev || s.setGrabCursor(!0), s.emit("sliderFirstMove", p);
    }
    if (new Date().getTime(), r.isMoved && r.allowThresholdMove && w !== s.touchesDirection && S && T && Math.abs(v) >= 1) return Object.assign(a, {
      startX: u,
      startY: h,
      currentX: u,
      currentY: h,
      startTranslate: r.currentTranslate
    }), r.loopSwapReset = !0, void (r.startTranslate = r.currentTranslate);
    s.emit("sliderMove", p), r.isMoved = !0, r.currentTranslate = v + r.startTranslate;
    var b = !0,
      x = n.resistanceRatio;
    if (n.touchReleaseOnEdges && (x = 0), v > 0 ? (S && T && r.allowThresholdMove && r.currentTranslate > (n.centeredSlides ? s.minTranslate() - s.slidesSizesGrid[s.activeIndex + 1] : s.minTranslate()) && s.loopFix({
      direction: "prev",
      setTranslate: !0,
      activeSlideIndex: 0
    }), r.currentTranslate > s.minTranslate() && (b = !1, n.resistance && (r.currentTranslate = s.minTranslate() - 1 + Math.pow(-s.minTranslate() + r.startTranslate + v, x)))) : v < 0 && (S && T && r.allowThresholdMove && r.currentTranslate < (n.centeredSlides ? s.maxTranslate() + s.slidesSizesGrid[s.slidesSizesGrid.length - 1] : s.maxTranslate()) && s.loopFix({
      direction: "next",
      setTranslate: !0,
      activeSlideIndex: s.slides.length - ("auto" === n.slidesPerView ? s.slidesPerViewDynamic() : Math.ceil(parseFloat(n.slidesPerView, 10)))
    }), r.currentTranslate < s.maxTranslate() && (b = !1, n.resistance && (r.currentTranslate = s.maxTranslate() + 1 - Math.pow(s.maxTranslate() - r.startTranslate - v, x)))), b && (p.preventedByNestedSwiper = !0), !s.allowSlideNext && "next" === s.swipeDirection && r.currentTranslate < r.startTranslate && (r.currentTranslate = r.startTranslate), !s.allowSlidePrev && "prev" === s.swipeDirection && r.currentTranslate > r.startTranslate && (r.currentTranslate = r.startTranslate), s.allowSlidePrev || s.allowSlideNext || (r.currentTranslate = r.startTranslate), n.threshold > 0) {
      if (!(Math.abs(v) > n.threshold || r.allowThresholdMove)) return void (r.currentTranslate = r.startTranslate);
      if (!r.allowThresholdMove) return r.allowThresholdMove = !0, a.startX = a.currentX, a.startY = a.currentY, r.currentTranslate = r.startTranslate, void (a.diff = s.isHorizontal() ? a.currentX - a.startX : a.currentY - a.startY);
    }
    n.followFinger && !n.cssMode && ((n.freeMode && n.freeMode.enabled && s.freeMode || n.watchSlidesProgress) && (s.updateActiveIndex(), s.updateSlidesClasses()), n.freeMode && n.freeMode.enabled && s.freeMode && s.freeMode.onTouchMove(), s.updateProgress(r.currentTranslate), s.setTranslate(r.currentTranslate));
  }
  function V(e) {
    var t = this,
      s = t.touchEventsData;
    var i,
      r = e;
    r.originalEvent && (r = r.originalEvent);
    if ("touchend" === r.type || "touchcancel" === r.type) {
      if (i = _toConsumableArray(r.changedTouches).filter(function (e) {
        return e.identifier === s.touchId;
      })[0], !i || i.identifier !== s.touchId) return;
    } else {
      if (null !== s.touchId) return;
      if (r.pointerId !== s.pointerId) return;
      i = r;
    }
    if (["pointercancel", "pointerout", "pointerleave", "contextmenu"].includes(r.type)) {
      if (!(["pointercancel", "contextmenu"].includes(r.type) && (t.browser.isSafari || t.browser.isWebView))) return;
    }
    s.pointerId = null, s.touchId = null;
    var n = t.params,
      l = t.touches,
      d = t.rtlTranslate,
      c = t.slidesGrid,
      p = t.enabled;
    if (!p) return;
    if (!n.simulateTouch && "mouse" === r.pointerType) return;
    if (s.allowTouchCallbacks && t.emit("touchEnd", r), s.allowTouchCallbacks = !1, !s.isTouched) return s.isMoved && n.grabCursor && t.setGrabCursor(!1), s.isMoved = !1, void (s.startMoving = !1);
    n.grabCursor && s.isMoved && s.isTouched && (!0 === t.allowSlideNext || !0 === t.allowSlidePrev) && t.setGrabCursor(!1);
    var u = o(),
      h = u - s.touchStartTime;
    if (t.allowClick) {
      var _e34 = r.path || r.composedPath && r.composedPath();
      t.updateClickedSlide(_e34 && _e34[0] || r.target, _e34), t.emit("tap click", r), h < 300 && u - s.lastClickTime < 300 && t.emit("doubleTap doubleClick", r);
    }
    if (s.lastClickTime = o(), a(function () {
      t.destroyed || (t.allowClick = !0);
    }), !s.isTouched || !s.isMoved || !t.swipeDirection || 0 === l.diff && !s.loopSwapReset || s.currentTranslate === s.startTranslate && !s.loopSwapReset) return s.isTouched = !1, s.isMoved = !1, void (s.startMoving = !1);
    var f;
    if (s.isTouched = !1, s.isMoved = !1, s.startMoving = !1, f = n.followFinger ? d ? t.translate : -t.translate : -s.currentTranslate, n.cssMode) return;
    if (n.freeMode && n.freeMode.enabled) return void t.freeMode.onTouchEnd({
      currentPos: f
    });
    var m = f >= -t.maxTranslate() && !t.params.loop;
    var v = 0,
      g = t.slidesSizesGrid[0];
    for (var _e35 = 0; _e35 < c.length; _e35 += _e35 < n.slidesPerGroupSkip ? 1 : n.slidesPerGroup) {
      var _t22 = _e35 < n.slidesPerGroupSkip - 1 ? 1 : n.slidesPerGroup;
      void 0 !== c[_e35 + _t22] ? (m || f >= c[_e35] && f < c[_e35 + _t22]) && (v = _e35, g = c[_e35 + _t22] - c[_e35]) : (m || f >= c[_e35]) && (v = _e35, g = c[c.length - 1] - c[c.length - 2]);
    }
    var w = null,
      S = null;
    n.rewind && (t.isBeginning ? S = n.virtual && n.virtual.enabled && t.virtual ? t.virtual.slides.length - 1 : t.slides.length - 1 : t.isEnd && (w = 0));
    var T = (f - c[v]) / g,
      b = v < n.slidesPerGroupSkip - 1 ? 1 : n.slidesPerGroup;
    if (h > n.longSwipesMs) {
      if (!n.longSwipes) return void t.slideTo(t.activeIndex);
      "next" === t.swipeDirection && (T >= n.longSwipesRatio ? t.slideTo(n.rewind && t.isEnd ? w : v + b) : t.slideTo(v)), "prev" === t.swipeDirection && (T > 1 - n.longSwipesRatio ? t.slideTo(v + b) : null !== S && T < 0 && Math.abs(T) > n.longSwipesRatio ? t.slideTo(S) : t.slideTo(v));
    } else {
      if (!n.shortSwipes) return void t.slideTo(t.activeIndex);
      t.navigation && (r.target === t.navigation.nextEl || r.target === t.navigation.prevEl) ? r.target === t.navigation.nextEl ? t.slideTo(v + b) : t.slideTo(v) : ("next" === t.swipeDirection && t.slideTo(null !== w ? w : v + b), "prev" === t.swipeDirection && t.slideTo(null !== S ? S : v));
    }
  }
  function N() {
    var e = this,
      t = e.params,
      s = e.el;
    if (s && 0 === s.offsetWidth) return;
    t.breakpoints && e.setBreakpoint();
    var i = e.allowSlideNext,
      r = e.allowSlidePrev,
      n = e.snapGrid,
      a = e.virtual && e.params.virtual.enabled;
    e.allowSlideNext = !0, e.allowSlidePrev = !0, e.updateSize(), e.updateSlides(), e.updateSlidesClasses();
    var o = a && t.loop;
    !("auto" === t.slidesPerView || t.slidesPerView > 1) || !e.isEnd || e.isBeginning || e.params.centeredSlides || o ? e.params.loop && !a ? e.slideToLoop(e.realIndex, 0, !1, !0) : e.slideTo(e.activeIndex, 0, !1, !0) : e.slideTo(e.slides.length - 1, 0, !1, !0), e.autoplay && e.autoplay.running && e.autoplay.paused && (clearTimeout(e.autoplay.resizeTimeout), e.autoplay.resizeTimeout = setTimeout(function () {
      e.autoplay && e.autoplay.running && e.autoplay.paused && e.autoplay.resume();
    }, 500)), e.allowSlidePrev = r, e.allowSlideNext = i, e.params.watchOverflow && n !== e.snapGrid && e.checkOverflow();
  }
  function F(e) {
    var t = this;
    t.enabled && (t.allowClick || (t.params.preventClicks && e.preventDefault(), t.params.preventClicksPropagation && t.animating && (e.stopPropagation(), e.stopImmediatePropagation())));
  }
  function B() {
    var e = this,
      t = e.wrapperEl,
      s = e.rtlTranslate,
      i = e.enabled;
    if (!i) return;
    var r;
    e.previousTranslate = e.translate, e.isHorizontal() ? e.translate = -t.scrollLeft : e.translate = -t.scrollTop, 0 === e.translate && (e.translate = 0), e.updateActiveIndex(), e.updateSlidesClasses();
    var n = e.maxTranslate() - e.minTranslate();
    r = 0 === n ? 0 : (e.translate - e.minTranslate()) / n, r !== e.progress && e.updateProgress(s ? -e.translate : e.translate), e.emit("setTranslate", e.translate, !1);
  }
  function $(e) {
    var t = this;
    C(t, e.target), t.params.cssMode || "auto" !== t.params.slidesPerView && !t.params.autoHeight || t.update();
  }
  function H() {
    var e = this;
    e.documentTouchHandlerProceeded || (e.documentTouchHandlerProceeded = !0, e.params.touchReleaseOnEdges && (e.el.style.touchAction = "auto"));
  }
  var R = function R(e, t) {
    var s = i(),
      r = e.params,
      n = e.el,
      a = e.wrapperEl,
      o = e.device,
      l = !!r.nested,
      d = "on" === t ? "addEventListener" : "removeEventListener",
      c = t;
    s[d]("touchstart", e.onDocumentTouchStart, {
      passive: !1,
      capture: l
    }), n[d]("touchstart", e.onTouchStart, {
      passive: !1
    }), n[d]("pointerdown", e.onTouchStart, {
      passive: !1
    }), s[d]("touchmove", e.onTouchMove, {
      passive: !1,
      capture: l
    }), s[d]("pointermove", e.onTouchMove, {
      passive: !1,
      capture: l
    }), s[d]("touchend", e.onTouchEnd, {
      passive: !0
    }), s[d]("pointerup", e.onTouchEnd, {
      passive: !0
    }), s[d]("pointercancel", e.onTouchEnd, {
      passive: !0
    }), s[d]("touchcancel", e.onTouchEnd, {
      passive: !0
    }), s[d]("pointerout", e.onTouchEnd, {
      passive: !0
    }), s[d]("pointerleave", e.onTouchEnd, {
      passive: !0
    }), s[d]("contextmenu", e.onTouchEnd, {
      passive: !0
    }), (r.preventClicks || r.preventClicksPropagation) && n[d]("click", e.onClick, !0), r.cssMode && a[d]("scroll", e.onScroll), r.updateOnWindowResize ? e[c](o.ios || o.android ? "resize orientationchange observerUpdate" : "resize observerUpdate", N, !0) : e[c]("observerUpdate", N, !0), n[d]("load", e.onLoad, {
      capture: !0
    });
  };
  var j = function j(e, t) {
    return e.grid && t.grid && t.grid.rows > 1;
  };
  var W = {
    init: !0,
    direction: "horizontal",
    oneWayMovement: !1,
    swiperElementNodeName: "SWIPER-CONTAINER",
    touchEventsTarget: "wrapper",
    initialSlide: 0,
    speed: 300,
    cssMode: !1,
    updateOnWindowResize: !0,
    resizeObserver: !0,
    nested: !1,
    createElements: !1,
    eventsPrefix: "swiper",
    enabled: !0,
    focusableElements: "input, select, option, textarea, button, video, label",
    width: null,
    height: null,
    preventInteractionOnTransition: !1,
    userAgent: null,
    url: null,
    edgeSwipeDetection: !1,
    edgeSwipeThreshold: 20,
    autoHeight: !1,
    setWrapperSize: !1,
    virtualTranslate: !1,
    effect: "slide",
    breakpoints: void 0,
    breakpointsBase: "window",
    spaceBetween: 0,
    slidesPerView: 1,
    slidesPerGroup: 1,
    slidesPerGroupSkip: 0,
    slidesPerGroupAuto: !1,
    centeredSlides: !1,
    centeredSlidesBounds: !1,
    slidesOffsetBefore: 0,
    slidesOffsetAfter: 0,
    normalizeSlideIndex: !0,
    centerInsufficientSlides: !1,
    watchOverflow: !0,
    roundLengths: !1,
    touchRatio: 1,
    touchAngle: 45,
    simulateTouch: !0,
    shortSwipes: !0,
    longSwipes: !0,
    longSwipesRatio: .5,
    longSwipesMs: 300,
    followFinger: !0,
    allowTouchMove: !0,
    threshold: 5,
    touchMoveStopPropagation: !1,
    touchStartPreventDefault: !0,
    touchStartForcePreventDefault: !1,
    touchReleaseOnEdges: !1,
    uniqueNavElements: !0,
    resistance: !0,
    resistanceRatio: .85,
    watchSlidesProgress: !1,
    grabCursor: !1,
    preventClicks: !0,
    preventClicksPropagation: !0,
    slideToClickedSlide: !1,
    loop: !1,
    loopAddBlankSlides: !0,
    loopAdditionalSlides: 0,
    loopPreventsSliding: !0,
    rewind: !1,
    allowSlidePrev: !0,
    allowSlideNext: !0,
    swipeHandler: null,
    noSwiping: !0,
    noSwipingClass: "swiper-no-swiping",
    noSwipingSelector: null,
    passiveListeners: !0,
    maxBackfaceHiddenSlides: 10,
    containerModifierClass: "swiper-",
    slideClass: "swiper-slide",
    slideBlankClass: "swiper-slide-blank",
    slideActiveClass: "swiper-slide-active",
    slideVisibleClass: "swiper-slide-visible",
    slideFullyVisibleClass: "swiper-slide-fully-visible",
    slideNextClass: "swiper-slide-next",
    slidePrevClass: "swiper-slide-prev",
    wrapperClass: "swiper-wrapper",
    lazyPreloaderClass: "swiper-lazy-preloader",
    lazyPreloadPrevNext: 0,
    runCallbacksOnInit: !0,
    _emitClasses: !1
  };
  function Y(e, t) {
    return function (s) {
      void 0 === s && (s = {});
      var i = Object.keys(s)[0],
        r = s[i];
      "object" == _typeof(r) && null !== r ? (!0 === e[i] && (e[i] = {
        enabled: !0
      }), "navigation" === i && e[i] && e[i].enabled && !e[i].prevEl && !e[i].nextEl && (e[i].auto = !0), ["pagination", "scrollbar"].indexOf(i) >= 0 && e[i] && e[i].enabled && !e[i].el && (e[i].auto = !0), i in e && "enabled" in r ? ("object" != _typeof(e[i]) || "enabled" in e[i] || (e[i].enabled = !0), e[i] || (e[i] = {
        enabled: !1
      }), c(t, s)) : c(t, s)) : c(t, s);
    };
  }
  var q = {
      eventsEmitter: M,
      update: L,
      translate: k,
      transition: {
        setTransition: function setTransition(e, t) {
          var s = this;
          s.params.cssMode || (s.wrapperEl.style.transitionDuration = "".concat(e, "ms"), s.wrapperEl.style.transitionDelay = 0 === e ? "0ms" : ""), s.emit("setTransition", e, t);
        },
        transitionStart: function transitionStart(e, t) {
          void 0 === e && (e = !0);
          var s = this,
            i = s.params;
          i.cssMode || (i.autoHeight && s.updateAutoHeight(), O({
            swiper: s,
            runCallbacks: e,
            direction: t,
            step: "Start"
          }));
        },
        transitionEnd: function transitionEnd(e, t) {
          void 0 === e && (e = !0);
          var s = this,
            i = s.params;
          s.animating = !1, i.cssMode || (s.setTransition(0), O({
            swiper: s,
            runCallbacks: e,
            direction: t,
            step: "End"
          }));
        }
      },
      slide: A,
      loop: z,
      grabCursor: {
        setGrabCursor: function setGrabCursor(e) {
          var t = this;
          if (!t.params.simulateTouch || t.params.watchOverflow && t.isLocked || t.params.cssMode) return;
          var s = "container" === t.params.touchEventsTarget ? t.el : t.wrapperEl;
          t.isElement && (t.__preventObserver__ = !0), s.style.cursor = "move", s.style.cursor = e ? "grabbing" : "grab", t.isElement && requestAnimationFrame(function () {
            t.__preventObserver__ = !1;
          });
        },
        unsetGrabCursor: function unsetGrabCursor() {
          var e = this;
          e.params.watchOverflow && e.isLocked || e.params.cssMode || (e.isElement && (e.__preventObserver__ = !0), e["container" === e.params.touchEventsTarget ? "el" : "wrapperEl"].style.cursor = "", e.isElement && requestAnimationFrame(function () {
            e.__preventObserver__ = !1;
          }));
        }
      },
      events: {
        attachEvents: function attachEvents() {
          var e = this,
            t = e.params;
          e.onTouchStart = D.bind(e), e.onTouchMove = _.bind(e), e.onTouchEnd = V.bind(e), e.onDocumentTouchStart = H.bind(e), t.cssMode && (e.onScroll = B.bind(e)), e.onClick = F.bind(e), e.onLoad = $.bind(e), R(e, "on");
        },
        detachEvents: function detachEvents() {
          R(this, "off");
        }
      },
      breakpoints: {
        setBreakpoint: function setBreakpoint() {
          var e = this,
            t = e.realIndex,
            s = e.initialized,
            i = e.params,
            r = e.el,
            n = i.breakpoints;
          if (!n || n && 0 === Object.keys(n).length) return;
          var a = e.getBreakpoint(n, e.params.breakpointsBase, e.el);
          if (!a || e.currentBreakpoint === a) return;
          var o = (a in n ? n[a] : void 0) || e.originalParams,
            l = j(e, i),
            d = j(e, o),
            p = i.enabled;
          l && !d ? (r.classList.remove("".concat(i.containerModifierClass, "grid"), "".concat(i.containerModifierClass, "grid-column")), e.emitContainerClasses()) : !l && d && (r.classList.add("".concat(i.containerModifierClass, "grid")), (o.grid.fill && "column" === o.grid.fill || !o.grid.fill && "column" === i.grid.fill) && r.classList.add("".concat(i.containerModifierClass, "grid-column")), e.emitContainerClasses()), ["navigation", "pagination", "scrollbar"].forEach(function (t) {
            if (void 0 === o[t]) return;
            var s = i[t] && i[t].enabled,
              r = o[t] && o[t].enabled;
            s && !r && e[t].disable(), !s && r && e[t].enable();
          });
          var u = o.direction && o.direction !== i.direction,
            h = i.loop && (o.slidesPerView !== i.slidesPerView || u),
            f = i.loop;
          u && s && e.changeDirection(), c(e.params, o);
          var m = e.params.enabled,
            v = e.params.loop;
          Object.assign(e, {
            allowTouchMove: e.params.allowTouchMove,
            allowSlideNext: e.params.allowSlideNext,
            allowSlidePrev: e.params.allowSlidePrev
          }), p && !m ? e.disable() : !p && m && e.enable(), e.currentBreakpoint = a, e.emit("_beforeBreakpoint", o), s && (h ? (e.loopDestroy(), e.loopCreate(t), e.updateSlides()) : !f && v ? (e.loopCreate(t), e.updateSlides()) : f && !v && e.loopDestroy()), e.emit("breakpoint", o);
        },
        getBreakpoint: function getBreakpoint(e, t, s) {
          if (void 0 === t && (t = "window"), !e || "container" === t && !s) return;
          var i = !1;
          var r = n(),
            a = "window" === t ? r.innerHeight : s.clientHeight,
            o = Object.keys(e).map(function (e) {
              if ("string" == typeof e && 0 === e.indexOf("@")) {
                var _t23 = parseFloat(e.substr(1));
                return {
                  value: a * _t23,
                  point: e
                };
              }
              return {
                value: e,
                point: e
              };
            });
          o.sort(function (e, t) {
            return parseInt(e.value, 10) - parseInt(t.value, 10);
          });
          for (var _e36 = 0; _e36 < o.length; _e36 += 1) {
            var _o$_e = o[_e36],
              _n6 = _o$_e.point,
              _a4 = _o$_e.value;
            "window" === t ? r.matchMedia("(min-width: ".concat(_a4, "px)")).matches && (i = _n6) : _a4 <= s.clientWidth && (i = _n6);
          }
          return i || "max";
        }
      },
      checkOverflow: {
        checkOverflow: function checkOverflow() {
          var e = this,
            t = e.isLocked,
            s = e.params,
            i = s.slidesOffsetBefore;
          if (i) {
            var _t24 = e.slides.length - 1,
              _s12 = e.slidesGrid[_t24] + e.slidesSizesGrid[_t24] + 2 * i;
            e.isLocked = e.size > _s12;
          } else e.isLocked = 1 === e.snapGrid.length;
          !0 === s.allowSlideNext && (e.allowSlideNext = !e.isLocked), !0 === s.allowSlidePrev && (e.allowSlidePrev = !e.isLocked), t && t !== e.isLocked && (e.isEnd = !1), t !== e.isLocked && e.emit(e.isLocked ? "lock" : "unlock");
        }
      },
      classes: {
        addClasses: function addClasses() {
          var _r$classList;
          var e = this,
            t = e.classNames,
            s = e.params,
            i = e.rtl,
            r = e.el,
            n = e.device,
            a = function (e, t) {
              var s = [];
              return e.forEach(function (e) {
                "object" == _typeof(e) ? Object.keys(e).forEach(function (i) {
                  e[i] && s.push(t + i);
                }) : "string" == typeof e && s.push(t + e);
              }), s;
            }(["initialized", s.direction, {
              "free-mode": e.params.freeMode && s.freeMode.enabled
            }, {
              autoheight: s.autoHeight
            }, {
              rtl: i
            }, {
              grid: s.grid && s.grid.rows > 1
            }, {
              "grid-column": s.grid && s.grid.rows > 1 && "column" === s.grid.fill
            }, {
              android: n.android
            }, {
              ios: n.ios
            }, {
              "css-mode": s.cssMode
            }, {
              centered: s.cssMode && s.centeredSlides
            }, {
              "watch-progress": s.watchSlidesProgress
            }], s.containerModifierClass);
          t.push.apply(t, _toConsumableArray(a)), (_r$classList = r.classList).add.apply(_r$classList, _toConsumableArray(t)), e.emitContainerClasses();
        },
        removeClasses: function removeClasses() {
          var _e$classList;
          var e = this.el,
            t = this.classNames;
          (_e$classList = e.classList).remove.apply(_e$classList, _toConsumableArray(t)), this.emitContainerClasses();
        }
      }
    },
    X = {};
  var U = /*#__PURE__*/function () {
    function U() {
      var _r8, _r9, _o$modules;
      _classCallCheck(this, U);
      var e, t;
      for (var s = arguments.length, r = new Array(s), n = 0; n < s; n++) r[n] = arguments[n];
      1 === r.length && r[0].constructor && "Object" === Object.prototype.toString.call(r[0]).slice(8, -1) ? t = r[0] : (_r8 = r, _r9 = _slicedToArray(_r8, 2), e = _r9[0], t = _r9[1], _r8), t || (t = {}), t = c({}, t), e && !t.el && (t.el = e);
      var a = i();
      if (t.el && "string" == typeof t.el && a.querySelectorAll(t.el).length > 1) {
        var _e37 = [];
        return a.querySelectorAll(t.el).forEach(function (s) {
          var i = c({}, t, {
            el: s
          });
          _e37.push(new U(i));
        }), _e37;
      }
      var o = this;
      o.__swiper__ = !0, o.support = x(), o.device = y({
        userAgent: t.userAgent
      }), o.browser = E(), o.eventsListeners = {}, o.eventsAnyListeners = [], o.modules = _toConsumableArray(o.__modules__), t.modules && Array.isArray(t.modules) && (_o$modules = o.modules).push.apply(_o$modules, _toConsumableArray(t.modules));
      var l = {};
      o.modules.forEach(function (e) {
        e({
          params: t,
          swiper: o,
          extendParams: Y(t, l),
          on: o.on.bind(o),
          once: o.once.bind(o),
          off: o.off.bind(o),
          emit: o.emit.bind(o)
        });
      });
      var d = c({}, W, l);
      return o.params = c({}, d, X, t), o.originalParams = c({}, o.params), o.passedParams = c({}, t), o.params && o.params.on && Object.keys(o.params.on).forEach(function (e) {
        o.on(e, o.params.on[e]);
      }), o.params && o.params.onAny && o.onAny(o.params.onAny), Object.assign(o, {
        enabled: o.params.enabled,
        el: e,
        classNames: [],
        slides: [],
        slidesGrid: [],
        snapGrid: [],
        slidesSizesGrid: [],
        isHorizontal: function isHorizontal() {
          return "horizontal" === o.params.direction;
        },
        isVertical: function isVertical() {
          return "vertical" === o.params.direction;
        },
        activeIndex: 0,
        realIndex: 0,
        isBeginning: !0,
        isEnd: !1,
        translate: 0,
        previousTranslate: 0,
        progress: 0,
        velocity: 0,
        animating: !1,
        cssOverflowAdjustment: function cssOverflowAdjustment() {
          return Math.trunc(this.translate / Math.pow(2, 23)) * Math.pow(2, 23);
        },
        allowSlideNext: o.params.allowSlideNext,
        allowSlidePrev: o.params.allowSlidePrev,
        touchEventsData: {
          isTouched: void 0,
          isMoved: void 0,
          allowTouchCallbacks: void 0,
          touchStartTime: void 0,
          isScrolling: void 0,
          currentTranslate: void 0,
          startTranslate: void 0,
          allowThresholdMove: void 0,
          focusableElements: o.params.focusableElements,
          lastClickTime: 0,
          clickTimeout: void 0,
          velocities: [],
          allowMomentumBounce: void 0,
          startMoving: void 0,
          pointerId: null,
          touchId: null
        },
        allowClick: !0,
        allowTouchMove: o.params.allowTouchMove,
        touches: {
          startX: 0,
          startY: 0,
          currentX: 0,
          currentY: 0,
          diff: 0
        },
        imagesToLoad: [],
        imagesLoaded: 0
      }), o.emit("_swiper"), o.params.init && o.init(), o;
    }
    _createClass(U, [{
      key: "getDirectionLabel",
      value: function getDirectionLabel(e) {
        return this.isHorizontal() ? e : {
          width: "height",
          "margin-top": "margin-left",
          "margin-bottom ": "margin-right",
          "margin-left": "margin-top",
          "margin-right": "margin-bottom",
          "padding-left": "padding-top",
          "padding-right": "padding-bottom",
          marginRight: "marginBottom"
        }[e];
      }
    }, {
      key: "getSlideIndex",
      value: function getSlideIndex(e) {
        var t = this.slidesEl,
          s = this.params,
          i = g(h(t, ".".concat(s.slideClass, ", swiper-slide"))[0]);
        return g(e) - i;
      }
    }, {
      key: "getSlideIndexByData",
      value: function getSlideIndexByData(e) {
        return this.getSlideIndex(this.slides.filter(function (t) {
          return 1 * t.getAttribute("data-swiper-slide-index") === e;
        })[0]);
      }
    }, {
      key: "recalcSlides",
      value: function recalcSlides() {
        var e = this.slidesEl,
          t = this.params;
        this.slides = h(e, ".".concat(t.slideClass, ", swiper-slide"));
      }
    }, {
      key: "enable",
      value: function enable() {
        var e = this;
        e.enabled || (e.enabled = !0, e.params.grabCursor && e.setGrabCursor(), e.emit("enable"));
      }
    }, {
      key: "disable",
      value: function disable() {
        var e = this;
        e.enabled && (e.enabled = !1, e.params.grabCursor && e.unsetGrabCursor(), e.emit("disable"));
      }
    }, {
      key: "setProgress",
      value: function setProgress(e, t) {
        var s = this;
        e = Math.min(Math.max(e, 0), 1);
        var i = s.minTranslate(),
          r = (s.maxTranslate() - i) * e + i;
        s.translateTo(r, void 0 === t ? 0 : t), s.updateActiveIndex(), s.updateSlidesClasses();
      }
    }, {
      key: "emitContainerClasses",
      value: function emitContainerClasses() {
        var e = this;
        if (!e.params._emitClasses || !e.el) return;
        var t = e.el.className.split(" ").filter(function (t) {
          return 0 === t.indexOf("swiper") || 0 === t.indexOf(e.params.containerModifierClass);
        });
        e.emit("_containerClasses", t.join(" "));
      }
    }, {
      key: "getSlideClasses",
      value: function getSlideClasses(e) {
        var t = this;
        return t.destroyed ? "" : e.className.split(" ").filter(function (e) {
          return 0 === e.indexOf("swiper-slide") || 0 === e.indexOf(t.params.slideClass);
        }).join(" ");
      }
    }, {
      key: "emitSlidesClasses",
      value: function emitSlidesClasses() {
        var e = this;
        if (!e.params._emitClasses || !e.el) return;
        var t = [];
        e.slides.forEach(function (s) {
          var i = e.getSlideClasses(s);
          t.push({
            slideEl: s,
            classNames: i
          }), e.emit("_slideClass", s, i);
        }), e.emit("_slideClasses", t);
      }
    }, {
      key: "slidesPerViewDynamic",
      value: function slidesPerViewDynamic(e, t) {
        void 0 === e && (e = "current"), void 0 === t && (t = !1);
        var s = this.params,
          i = this.slides,
          r = this.slidesGrid,
          n = this.slidesSizesGrid,
          a = this.size,
          o = this.activeIndex;
        var l = 1;
        if ("number" == typeof s.slidesPerView) return s.slidesPerView;
        if (s.centeredSlides) {
          var _e38,
            _t25 = i[o] ? Math.ceil(i[o].swiperSlideSize) : 0;
          for (var _s13 = o + 1; _s13 < i.length; _s13 += 1) i[_s13] && !_e38 && (_t25 += Math.ceil(i[_s13].swiperSlideSize), l += 1, _t25 > a && (_e38 = !0));
          for (var _s14 = o - 1; _s14 >= 0; _s14 -= 1) i[_s14] && !_e38 && (_t25 += i[_s14].swiperSlideSize, l += 1, _t25 > a && (_e38 = !0));
        } else if ("current" === e) for (var _e39 = o + 1; _e39 < i.length; _e39 += 1) {
          (t ? r[_e39] + n[_e39] - r[o] < a : r[_e39] - r[o] < a) && (l += 1);
        } else for (var _e40 = o - 1; _e40 >= 0; _e40 -= 1) {
          r[o] - r[_e40] < a && (l += 1);
        }
        return l;
      }
    }, {
      key: "update",
      value: function update() {
        var e = this;
        if (!e || e.destroyed) return;
        var t = e.snapGrid,
          s = e.params;
        function i() {
          var t = e.rtlTranslate ? -1 * e.translate : e.translate,
            s = Math.min(Math.max(t, e.maxTranslate()), e.minTranslate());
          e.setTranslate(s), e.updateActiveIndex(), e.updateSlidesClasses();
        }
        var r;
        if (s.breakpoints && e.setBreakpoint(), _toConsumableArray(e.el.querySelectorAll('[loading="lazy"]')).forEach(function (t) {
          t.complete && C(e, t);
        }), e.updateSize(), e.updateSlides(), e.updateProgress(), e.updateSlidesClasses(), s.freeMode && s.freeMode.enabled && !s.cssMode) i(), s.autoHeight && e.updateAutoHeight();else {
          if (("auto" === s.slidesPerView || s.slidesPerView > 1) && e.isEnd && !s.centeredSlides) {
            var _t26 = e.virtual && s.virtual.enabled ? e.virtual.slides : e.slides;
            r = e.slideTo(_t26.length - 1, 0, !1, !0);
          } else r = e.slideTo(e.activeIndex, 0, !1, !0);
          r || i();
        }
        s.watchOverflow && t !== e.snapGrid && e.checkOverflow(), e.emit("update");
      }
    }, {
      key: "changeDirection",
      value: function changeDirection(e, t) {
        void 0 === t && (t = !0);
        var s = this,
          i = s.params.direction;
        return e || (e = "horizontal" === i ? "vertical" : "horizontal"), e === i || "horizontal" !== e && "vertical" !== e || (s.el.classList.remove("".concat(s.params.containerModifierClass).concat(i)), s.el.classList.add("".concat(s.params.containerModifierClass).concat(e)), s.emitContainerClasses(), s.params.direction = e, s.slides.forEach(function (t) {
          "vertical" === e ? t.style.width = "" : t.style.height = "";
        }), s.emit("changeDirection"), t && s.update()), s;
      }
    }, {
      key: "changeLanguageDirection",
      value: function changeLanguageDirection(e) {
        var t = this;
        t.rtl && "rtl" === e || !t.rtl && "ltr" === e || (t.rtl = "rtl" === e, t.rtlTranslate = "horizontal" === t.params.direction && t.rtl, t.rtl ? (t.el.classList.add("".concat(t.params.containerModifierClass, "rtl")), t.el.dir = "rtl") : (t.el.classList.remove("".concat(t.params.containerModifierClass, "rtl")), t.el.dir = "ltr"), t.update());
      }
    }, {
      key: "mount",
      value: function mount(e) {
        var t = this;
        if (t.mounted) return !0;
        var s = e || t.params.el;
        if ("string" == typeof s && (s = document.querySelector(s)), !s) return !1;
        s.swiper = t, s.parentNode && s.parentNode.host && s.parentNode.host.nodeName === t.params.swiperElementNodeName.toUpperCase() && (t.isElement = !0);
        var i = function i() {
          return ".".concat((t.params.wrapperClass || "").trim().split(" ").join("."));
        };
        var r = function () {
          if (s && s.shadowRoot && s.shadowRoot.querySelector) {
            return s.shadowRoot.querySelector(i());
          }
          return h(s, i())[0];
        }();
        return !r && t.params.createElements && (r = m("div", t.params.wrapperClass), s.append(r), h(s, ".".concat(t.params.slideClass)).forEach(function (e) {
          r.append(e);
        })), Object.assign(t, {
          el: s,
          wrapperEl: r,
          slidesEl: t.isElement && !s.parentNode.host.slideSlots ? s.parentNode.host : r,
          hostEl: t.isElement ? s.parentNode.host : s,
          mounted: !0,
          rtl: "rtl" === s.dir.toLowerCase() || "rtl" === v(s, "direction"),
          rtlTranslate: "horizontal" === t.params.direction && ("rtl" === s.dir.toLowerCase() || "rtl" === v(s, "direction")),
          wrongRTL: "-webkit-box" === v(r, "display")
        }), !0;
      }
    }, {
      key: "init",
      value: function init(e) {
        var t = this;
        if (t.initialized) return t;
        if (!1 === t.mount(e)) return t;
        t.emit("beforeInit"), t.params.breakpoints && t.setBreakpoint(), t.addClasses(), t.updateSize(), t.updateSlides(), t.params.watchOverflow && t.checkOverflow(), t.params.grabCursor && t.enabled && t.setGrabCursor(), t.params.loop && t.virtual && t.params.virtual.enabled ? t.slideTo(t.params.initialSlide + t.virtual.slidesBefore, 0, t.params.runCallbacksOnInit, !1, !0) : t.slideTo(t.params.initialSlide, 0, t.params.runCallbacksOnInit, !1, !0), t.params.loop && t.loopCreate(), t.attachEvents();
        var s = _toConsumableArray(t.el.querySelectorAll('[loading="lazy"]'));
        return t.isElement && s.push.apply(s, _toConsumableArray(t.hostEl.querySelectorAll('[loading="lazy"]'))), s.forEach(function (e) {
          e.complete ? C(t, e) : e.addEventListener("load", function (e) {
            C(t, e.target);
          });
        }), I(t), t.initialized = !0, I(t), t.emit("init"), t.emit("afterInit"), t;
      }
    }, {
      key: "destroy",
      value: function destroy(e, t) {
        void 0 === e && (e = !0), void 0 === t && (t = !0);
        var s = this,
          i = s.params,
          r = s.el,
          n = s.wrapperEl,
          a = s.slides;
        return void 0 === s.params || s.destroyed || (s.emit("beforeDestroy"), s.initialized = !1, s.detachEvents(), i.loop && s.loopDestroy(), t && (s.removeClasses(), r.removeAttribute("style"), n.removeAttribute("style"), a && a.length && a.forEach(function (e) {
          e.classList.remove(i.slideVisibleClass, i.slideFullyVisibleClass, i.slideActiveClass, i.slideNextClass, i.slidePrevClass), e.removeAttribute("style"), e.removeAttribute("data-swiper-slide-index");
        })), s.emit("destroy"), Object.keys(s.eventsListeners).forEach(function (e) {
          s.off(e);
        }), !1 !== e && (s.el.swiper = null, function (e) {
          var t = e;
          Object.keys(t).forEach(function (e) {
            try {
              t[e] = null;
            } catch (e) {}
            try {
              delete t[e];
            } catch (e) {}
          });
        }(s)), s.destroyed = !0), null;
      }
    }], [{
      key: "extendDefaults",
      value: function extendDefaults(e) {
        c(X, e);
      }
    }, {
      key: "extendedDefaults",
      get: function get() {
        return X;
      }
    }, {
      key: "defaults",
      get: function get() {
        return W;
      }
    }, {
      key: "installModule",
      value: function installModule(e) {
        U.prototype.__modules__ || (U.prototype.__modules__ = []);
        var t = U.prototype.__modules__;
        "function" == typeof e && t.indexOf(e) < 0 && t.push(e);
      }
    }, {
      key: "use",
      value: function use(e) {
        return Array.isArray(e) ? (e.forEach(function (e) {
          return U.installModule(e);
        }), U) : (U.installModule(e), U);
      }
    }]);
    return U;
  }();
  return Object.keys(q).forEach(function (e) {
    Object.keys(q[e]).forEach(function (t) {
      U.prototype[t] = q[e][t];
    });
  }), U.use([function (e) {
    var t = e.swiper,
      s = e.on,
      i = e.emit;
    var r = n();
    var a = null,
      o = null;
    var l = function l() {
        t && !t.destroyed && t.initialized && (i("beforeResize"), i("resize"));
      },
      d = function d() {
        t && !t.destroyed && t.initialized && i("orientationchange");
      };
    s("init", function () {
      t.params.resizeObserver && void 0 !== r.ResizeObserver ? t && !t.destroyed && t.initialized && (a = new ResizeObserver(function (e) {
        o = r.requestAnimationFrame(function () {
          var s = t.width,
            i = t.height;
          var r = s,
            n = i;
          e.forEach(function (e) {
            var s = e.contentBoxSize,
              i = e.contentRect,
              a = e.target;
            a && a !== t.el || (r = i ? i.width : (s[0] || s).inlineSize, n = i ? i.height : (s[0] || s).blockSize);
          }), r === s && n === i || l();
        });
      }), a.observe(t.el)) : (r.addEventListener("resize", l), r.addEventListener("orientationchange", d));
    }), s("destroy", function () {
      o && r.cancelAnimationFrame(o), a && a.unobserve && t.el && (a.unobserve(t.el), a = null), r.removeEventListener("resize", l), r.removeEventListener("orientationchange", d);
    });
  }, function (e) {
    var t = e.swiper,
      s = e.extendParams,
      i = e.on,
      r = e.emit;
    var a = [],
      o = n(),
      l = function l(e, s) {
        void 0 === s && (s = {});
        var i = new (o.MutationObserver || o.WebkitMutationObserver)(function (e) {
          if (t.__preventObserver__) return;
          if (1 === e.length) return void r("observerUpdate", e[0]);
          var s = function s() {
            r("observerUpdate", e[0]);
          };
          o.requestAnimationFrame ? o.requestAnimationFrame(s) : o.setTimeout(s, 0);
        });
        i.observe(e, {
          attributes: void 0 === s.attributes || s.attributes,
          childList: void 0 === s.childList || s.childList,
          characterData: void 0 === s.characterData || s.characterData
        }), a.push(i);
      };
    s({
      observer: !1,
      observeParents: !1,
      observeSlideChildren: !1
    }), i("init", function () {
      if (t.params.observer) {
        if (t.params.observeParents) {
          var _e41 = function (e, t) {
            var s = [];
            var i = e.parentElement;
            for (; i;) t ? i.matches(t) && s.push(i) : s.push(i), i = i.parentElement;
            return s;
          }(t.hostEl);
          for (var _t27 = 0; _t27 < _e41.length; _t27 += 1) l(_e41[_t27]);
        }
        l(t.hostEl, {
          childList: t.params.observeSlideChildren
        }), l(t.wrapperEl, {
          attributes: !1
        });
      }
    }), i("destroy", function () {
      a.forEach(function (e) {
        e.disconnect();
      }), a.splice(0, a.length);
    });
  }]), U;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,